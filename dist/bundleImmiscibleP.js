/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./prb/ImmiscibleP.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./prb/ImmiscibleP.js":
/*!****************************!*\
  !*** ./prb/ImmiscibleP.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _ProblemController = __webpack_require__(/*! ../src/ProblemController.js */ \"./src/ProblemController.js\");\n\nvar datalabel = \"temperature = @T@ Â°C <br> saturation pressures: P<sub>W</sub><sup>sat</sup> = @PsatW@ bar, P<sub>@org@</sub><sup>sat</sup> = @PsatO@ bar\";\n\nvar watercolor = \"blue\";\nvar organiccolor = \"orange\";\nvar triplecolor = \"green\";\nvar textcolor = \"black\";\nvar graycolor = \"#999999\";\nvar answercolor = \"green\";\nvar Pmin = 0;\nvar Pmax = 7;\n\nvar graphinfo = {\n    \"graphheight\": 400,\n    \"graphwidth\": 600,\n    \"padding\": {\n        \"left\": 60,\n        \"bottom\": 60,\n        \"top\": 60,\n        \"right\": 30\n    },\n    \"graphbackground\": \"white\",\n    \"axesbackground\": \"lightgray\",\n    \"x\": {\n        \"label\": \"@compound@ mole fraction (z<sub>@org@</sub>)\",\n        \"min\": 0,\n        \"max\": 1,\n        \"majortick\": 0.1,\n        \"minortick\": 0.05,\n        \"gridline\": 0.05\n    },\n    \"y\": {\n        \"label\": \"pressure [bar]\",\n        \"min\": Pmin,\n        \"max\": Pmax,\n        \"majortick\": 1,\n        \"minortick\": 0.2,\n        \"gridline\": 0.5\n    },\n    \"x2\": {\n        \"label\": \"water mole fraction (z<sub>W</sub>)\",\n        \"min\": 1,\n        \"max\": 0,\n        \"majortick\": 0.1,\n        \"minortick\": 0.05,\n        \"gridline\": 0.05\n    }\n};\n\nvar pointtolerance = {\n    \"x\": 0.025,\n    \"y\": 0.2\n};\n\nvar normalcursor = {\n    \"format\": \"z<sub>@org@</sub> = ~x~, P = ~y~\",\n    \"digits\": {\n        \"x\": 2,\n        \"y\": 1\n    }\n};\n\nvar detailedcursor = {\n    \"format\": \"z<sub>@org@</sub> = ~x~, P = ~y~\",\n    \"digits\": {\n        \"x\": 2,\n        \"y\": 2\n    }\n};\n\nvar problem = {\n    \"pagetitle\": \"Construct a Pressure-Composition Diagram for Immiscible Liquids\",\n    \"variables\": {\n        \"constants\": {\n            \"AW\": 5.0768,\n            \"BW\": 1659.793,\n            \"CW\": 227.1,\n            \"AB\": 4.72583,\n            \"BB\": 1660.652,\n            \"CB\": 271.5,\n            \"AT\": 4.07827,\n            \"BT\": 1343.943,\n            \"CT\": 219.227,\n            \"AH\": 4.00266,\n            \"BH\": 1171.53,\n            \"CH\": 224.216,\n            \"Pmin\": Pmin,\n            \"Pmax\": Pmax\n        },\n        \"random\": {\n            \"T\": {\n                \"min\": 105,\n                \"max\": 125,\n                \"digits\": 0\n            },\n            \"orgnum\": {\n                \"min\": 0,\n                \"max\": 2,\n                \"digits\": 0\n            }\n        },\n        \"calculated\": {\n            \"org\": \"['B', 'T', 'H'][@orgnum@]\",\n            \"compound\": \"['benzene', 'toluene', 'hexane'][@orgnum@]\",\n            \"PsatW\": \"Antoine(@T@, @AW@, @BW@, @CW@).toFixed(1)\",\n            \"PsatO\": \"Antoine(@T@, @A@org@@, @B@org@@, @C@org@@).toFixed(1)\",\n            \"Psum\": \"@PsatW@ + @PsatO@\",\n            \"xc\": \"@PsatO@ / @Psum@\",\n            \"x1\": \"@xc@ * 3/6\",\n            \"x2\": \"@xc@ * 4/6\",\n            \"x3\": \"@xc@ * 5/6\",\n            \"x4\": \"@xc@ + (1-@xc@) * 1/6\",\n            \"x5\": \"@xc@ + (1-@xc@) * 2/6\",\n            \"x6\": \"@xc@ + (1-@xc@) * 3/6\",\n            \"y1\": \"@PsatW@ / (1 - @x1@)\",\n            \"y2\": \"@PsatW@ / (1 - @x2@)\",\n            \"y3\": \"@PsatW@ / (1 - @x3@)\",\n            \"y4\": \"@PsatO@ / @x4@\",\n            \"y5\": \"@PsatO@ / @x5@\",\n            \"y6\": \"@PsatO@ / @x6@\",\n            \"yllabel\": \"@Pmax@ * .5 + .5 * @Psum@\",\n            \"yvlabel\": \"@Pmin@ * .75 + .25 * @Psum@\",\n            \"ywlabel\": \"(@PsatW@+@Psum@)/2\",\n            \"yolabel\": \"(@PsatO@+@Psum@)/2\"\n        }\n    },\n    \"questions\": [{\n        \"questionelements\": [[[{\n            \"type\": \"graph\",\n            \"graphinfo\": graphinfo,\n            \"mode\": \"move\",\n            \"answercount\": {\n                \"point\": 0,\n                \"line\": 1\n            },\n            \"answer\": {\n                \"line\": [{ \"points\": [{ \"x\": \"0\", \"y\": \"@Psum@\", \"answer\": true, \"show\": false }, { \"x\": \"1\", \"y\": \"@Psum@\", \"show\": false }], \"tolerance\": pointtolerance, \"color\": answercolor }]\n            },\n            \"default\": {\n                \"line\": [{ \"points\": [{ \"x\": 0, \"y\": 4, \"movey\": true, \"show\": false }, { \"x\": 1, \"y\": 4, \"movey\": true, \"show\": false }],\n                    \"color\": \"black\",\n                    \"dashes\": {\n                        \"dash\": 3,\n                        \"space\": 3\n                    },\n                    \"answer\": true,\n                    \"altcursor\": {\n                        \"format\": \"P = ~y~\",\n                        \"digits\": { \"y\": 1 }\n                    }\n                }]\n\n            },\n            \"cursor\": normalcursor,\n            \"points\": 10\n        }, {\n            \"type\": \"text\",\n            \"label\": \"Hint: sum the saturation pressures\",\n            \"class\": \"hiddentext hint\"\n        }], [{\n            \"type\": \"text\",\n            \"label\": \"1) Drag the dotted line to the pressure where three phases coexist.\",\n            \"class\": \"prompt\"\n        }, {\n            \"type\": \"text\",\n            \"label\": datalabel,\n            \"class\": \"data\"\n        }]]],\n        \"requiredscore\": 0.00\n    }, // question\n    {\n        \"questionelements\": [[[{\n            \"type\": \"graph\",\n            \"graphinfo\": graphinfo,\n            \"mode\": \"move\",\n            \"answercount\": {\n                \"point\": 0,\n                \"line\": 0\n            },\n            \"answer\": {},\n            \"default\": {\n                \"line\": [{ \"points\": [{ \"x\": 0, \"y\": \"@Psum@\", \"show\": false }, { \"x\": 1, \"y\": \"@Psum@\", \"show\": false }],\n                    \"color\": graycolor\n                }],\n                \"text\": [{ \"text\": \"region A\", \"position\": { \"x\": 0.5, \"y\": \"@yllabel@\" }, \"font\": \"sans-serif\", \"fontsize\": 20, \"fontstyle\": \"bold\", \"align\": \"center\", \"color\": \"blue\" }, { \"text\": \"region B\", \"position\": { \"x\": 0.5, \"y\": \"@yvlabel@\" }, \"font\": \"sans-serif\", \"fontsize\": 20, \"fontstyle\": \"bold\", \"align\": \"center\", \"color\": \"blue\" }]\n            },\n            \"cursor\": normalcursor,\n            \"points\": 0\n        }, {\n            \"type\": \"text\",\n            \"label\": \"Hint: sum the saturation pressures\",\n            \"class\": \"hiddentext hint\"\n        }], [{\n            \"type\": \"text\",\n            \"label\": \"2) Which region has two liquids in equilibrium and no vapor?\",\n            \"class\": \"prompt\"\n        }, {\n            \"type\": \"text\",\n            \"label\": datalabel,\n            \"class\": \"data\"\n        }, {\n            \"type\": \"textbox\",\n            \"placeholder\": \"type A or B\",\n            \"answertype\": \"text\",\n            \"answer\": \"A\",\n            \"tolerance\": 0,\n            \"points\": 10\n        }, {\n            \"type\": \"text\",\n            \"label\": \"Hint: liquids are more stable at higher pressures\",\n            \"class\": \"hiddentext hint\"\n        }]]],\n        \"requiredscore\": 0.00\n    }, // question\n    {\n        \"questionelements\": [[[{\n            \"type\": \"graph\",\n            \"graphinfo\": graphinfo,\n            \"mode\": \"move\",\n            \"answercount\": {\n                \"point\": 2,\n                \"line\": 0\n            },\n            \"answer\": {\n                \"point\": [{ \"x\": \"0\", \"y\": \"@PsatW@\", \"tolerance\": pointtolerance, \"color\": watercolor }, { \"x\": \"1\", \"y\": \"@PsatO@\", \"tolerance\": pointtolerance, \"color\": organiccolor }]\n            },\n            \"default\": {\n                \"point\": [{ \"x\": 0.3, \"y\": 4, \"movex\": true, \"movey\": true, \"color\": watercolor, \"answer\": true }, { \"x\": 0.7, \"y\": 4, \"movex\": true, \"movey\": true, \"color\": organiccolor, \"answer\": true }],\n                \"line\": [{ \"points\": [{ \"x\": 0, \"y\": \"@Psum@\", \"show\": false }, { \"x\": 1, \"y\": \"@Psum@\", \"show\": false }], \"color\": graycolor }],\n                \"text\": [{ \"text\": \"liquid @compound@ + liquid water\", \"position\": { \"x\": 0.5, \"y\": \"@yllabel@\" }, \"align\": \"center\", \"color\": textcolor }, { \"text\": \"vapor\", \"position\": { \"x\": 0.5, \"y\": \"@yvlabel@\" }, \"align\": \"center\", \"color\": textcolor }]\n            },\n            \"cursor\": normalcursor,\n            \"points\": 20\n        }, // element\n        {\n            \"type\": \"text\",\n            \"label\": \"Hint: pure component saturation pressures\",\n            \"class\": \"hiddentext hint\"\n        }], // element\n        [{\n            \"type\": \"text\",\n            \"label\": \"3) Drag the blue point to where pure water is in VLE (vapor-liquid equilibrium), and drag the orange point to where pure @compound@ is in VLE. <br>\",\n            \"class\": \"prompt\"\n        }, // element\n        {\n            \"type\": \"text\",\n            \"label\": datalabel,\n            \"class\": \"data\"\n        }]]], // questionelements\n        \"requiredscore\": 0.00\n    }, // question\n    {\n        \"questionelements\": [[[{\n            \"type\": \"graph\",\n            \"graphinfo\": graphinfo,\n            \"mode\": \"move\",\n            \"answercount\": {\n                \"point\": 1,\n                \"line\": 0\n            },\n            \"answer\": {\n                \"point\": [{ \"x\": \"@xc@\", \"y\": \"@Psum@\", \"tolerance\": pointtolerance, \"color\": triplecolor }]\n            },\n            \"default\": {\n                \"point\": [{ \"x\": \"0\", \"y\": \"@PsatW@\", \"color\": watercolor }, { \"x\": \"1\", \"y\": \"@PsatO@\", \"color\": organiccolor }, { \"x\": 0.5, \"y\": 4, \"color\": triplecolor, \"movex\": true, \"movey\": true, \"answer\": true }],\n                \"line\": [{ \"points\": [{ \"x\": 0, \"y\": \"@Psum@\", \"show\": false }, { \"x\": 1, \"y\": \"@Psum@\", \"show\": false }], \"color\": graycolor }],\n                \"text\": [{ \"text\": \"liquid @compound@ + liquid water\", \"position\": { \"x\": 0.5, \"y\": \"@yllabel@\" }, \"align\": \"center\", \"color\": textcolor }, { \"text\": \"vapor\", \"position\": { \"x\": 0.5, \"y\": \"@yvlabel@\" }, \"align\": \"center\", \"color\": textcolor }]\n            },\n            \"cursor\": normalcursor,\n            \"points\": 10\n        }, // element\n        {\n            \"type\": \"text\",\n            \"label\": \"Hint: each liquid exerts its saturation pressure\",\n            \"class\": \"hiddentext hint\"\n        }], // element\n        [{\n            \"type\": \"text\",\n            \"label\": \"4) Drag the green point to where vapor is in equilibrium with two liquid phases. <br>\",\n            \"class\": \"prompt\"\n        }, // element\n        {\n            \"type\": \"text\",\n            \"label\": datalabel,\n            \"class\": \"data\"\n        }]]], // questionelements\n        \"requiredscore\": 0.00\n    }, // question\n    {\n        \"questionelements\": [[[{\n            \"type\": \"graph\",\n            \"graphinfo\": graphinfo,\n            \"mode\": \"move\",\n            \"answercount\": {\n                \"point\": 0,\n                \"line\": 2\n            },\n            \"answer\": {\n                \"line\": [{ \"points\": [{ \"x\": \"0\", \"y\": \"@Psum@\", \"show\": false }, { \"x\": \"0\", \"y\": \"@PsatW@\", \"color\": watercolor }, { \"x\": \"@x1@\", \"y\": \"@y1@\", \"answer\": true, \"show\": false }, { \"x\": \"@x2@\", \"y\": \"@y2@\", \"answer\": true, \"show\": false }, { \"x\": \"@x3@\", \"y\": \"@y3@\", \"answer\": true, \"show\": false }, { \"x\": \"@xc@\", \"y\": \"@Psum@\" }], \"tolerance\": pointtolerance, \"color\": answercolor }, { \"points\": [{ \"x\": \"@xc@\", \"y\": \"@Psum@\", \"color\": \"green\" }, { \"x\": \"@x4@\", \"y\": \"@y4@\", \"answer\": true, \"show\": false }, { \"x\": \"@x5@\", \"y\": \"@y5@\", \"answer\": true, \"show\": false }, { \"x\": \"@x6@\", \"y\": \"@y6@\", \"answer\": true, \"show\": false }, { \"x\": \"1\", \"y\": \"@PsatO@\", \"color\": organiccolor }, { \"x\": \"1\", \"y\": \"@Psum@\", \"show\": false }], \"tolerance\": pointtolerance, \"color\": answercolor }]\n            },\n            \"default\": {\n                \"line\": [{ \"points\": [{ \"x\": 0, \"y\": \"@Psum@\", \"radius\": 1, \"show\": false }, { \"x\": 1, \"y\": \"@Psum@\", \"radius\": 1, \"show\": false }],\n                    \"color\": graycolor }, { \"points\": [{ \"x\": \"0\", \"y\": \"@Psum@\", \"show\": false }, { \"x\": \"0\", \"y\": \"@PsatW@\", \"color\": watercolor }, { \"x\": \"@x1@\", \"y\": \"@PsatW@\", \"movey\": true }, { \"x\": \"@x2@\", \"y\": \"@PsatW@\", \"movey\": true }, { \"x\": \"@x3@\", \"y\": \"@PsatW@\", \"movey\": true }, { \"x\": \"@xc@\", \"y\": \"@Psum@\", \"color\": \"green\" }],\n                    \"color\": graycolor,\n                    \"answer\": true,\n                    \"fill\": { \"color\": watercolor, \"opacity\": 0.2 } }, { \"points\": [{ \"x\": \"@xc@\", \"y\": \"@Psum@\", \"color\": \"green\" }, { \"x\": \"@x4@\", \"y\": \"@PsatO@\", \"movey\": true }, { \"x\": \"@x5@\", \"y\": \"@PsatO@\", \"movey\": true }, { \"x\": \"@x6@\", \"y\": \"@PsatO@\", \"movey\": true }, { \"x\": \"1\", \"y\": \"@PsatO@\", \"color\": organiccolor }, { \"x\": \"1\", \"y\": \"@Psum@\", \"show\": false }],\n                    \"color\": graycolor,\n                    \"answer\": true,\n                    \"fill\": { \"color\": organiccolor, \"opacity\": 0.2 } }],\n                \"text\": [{ \"text\": \"liquid @compound@ + liquid water\", \"position\": { \"x\": 0.5, \"y\": \"@yllabel@\" }, \"align\": \"center\", \"color\": textcolor }, { \"text\": \"vapor\", \"position\": { \"x\": 0.5, \"y\": \"@yvlabel@\" }, \"align\": \"center\", \"color\": textcolor }]\n            },\n            \"cursor\": detailedcursor,\n            \"points\": 20\n        }, // element\n        {\n            \"type\": \"text\",\n            \"label\": \"Hint: the vapor mole fraction for component i is P<sub>i</sub><sup>sat</sup> / P\",\n            \"class\": \"hiddentext hint\"\n        }], // element\n        [{\n            \"type\": \"text\",\n            \"label\": \"5) Drag each black point to the pressure where vapor with that mole fraction is in equilbrium with liquid. <br>\",\n            \"class\": \"prompt\"\n        }, // element\n        {\n            \"type\": \"text\",\n            \"label\": datalabel,\n            \"class\": \"data\"\n        }]]], // questionelements\n        \"requiredscore\": 0.00\n    }], // questions\n\n    \"finish\": {\n        \"questionelements\": [{\n            \"type\": \"graph\",\n            \"graphinfo\": graphinfo,\n            \"mode\": \"move\",\n            \"answercount\": {\n                \"point\": 0,\n                \"line\": 0\n            },\n            \"answer\": {},\n            \"default\": {\n                \"point\": [],\n                \"line\": [{ \"points\": [{ \"x\": 0, \"y\": \"@Psum@\", \"radius\": 1, \"show\": false }, { \"x\": 1, \"y\": \"@Psum@\", \"radius\": 1, \"show\": false }], \"color\": graycolor }, { \"points\": [{ \"x\": \"0\", \"y\": \"@Psum@\", \"show\": false }, { \"x\": \"0\", \"y\": \"@PsatW@\", \"color\": watercolor }, { \"x\": \"@x1@\", \"y\": \"@y1@\", \"show\": false }, { \"x\": \"@x2@\", \"y\": \"@y2@\", \"show\": false }, { \"x\": \"@x3@\", \"y\": \"@y3@\", \"show\": false }, { \"x\": \"@xc@\", \"y\": \"@Psum@\", \"color\": \"green\" }], \"color\": graycolor,\n                    \"fill\": { \"color\": watercolor, \"opacity\": 0.2 } }, { \"points\": [{ \"x\": \"@xc@\", \"y\": \"@Psum@\", \"color\": \"green\" }, { \"x\": \"@x4@\", \"y\": \"@y4@\", \"show\": false }, { \"x\": \"@x5@\", \"y\": \"@y5@\", \"show\": false }, { \"x\": \"@x6@\", \"y\": \"@y6@\", \"show\": false }, { \"x\": \"1\", \"y\": \"@PsatO@\", \"color\": organiccolor }, { \"x\": \"1\", \"y\": \"@Psum@\", \"show\": false }],\n                    \"color\": graycolor,\n                    \"fill\": { \"color\": organiccolor, \"opacity\": 0.2 } }],\n                \"text\": [{ \"text\": \"liquid @compound@ + liquid water\", \"position\": { \"x\": 0.5, \"y\": \"@yllabel@\" }, \"align\": \"center\", \"color\": textcolor }, { \"text\": \"vapor + liquid water\", \"position\": { \"x\": 0.01, \"y\": \"@ywlabel@\" }, \"align\": \"left\", \"color\": textcolor }, { \"text\": \"vapor + liquid @compound@\", \"position\": { \"x\": 0.99, \"y\": \"@yolabel@\" }, \"align\": \"right\", \"color\": textcolor }, { \"text\": \"vapor\", \"position\": { \"x\": 0.5, \"y\": \"@yvlabel@\" }, \"align\": \"center\", \"color\": textcolor }]\n            },\n            \"cursor\": detailedcursor\n        }] // questionelements\n    }, // finish\n\n    \"begin\": {\n        \"variables\": {\n            \"constants\": {\n                \"PsatW\": \"2.5\",\n                \"PsatO\": \"2.5\"\n            },\n            \"random\": {},\n            \"calculated\": {\n                \"Psum\": \"@PsatW@ + @PsatO@\",\n                \"xc\": \"@PsatO@ / @Psum@\",\n                \"x1\": \"@xc@ * 3/6\",\n                \"x2\": \"@xc@ * 4/6\",\n                \"x3\": \"@xc@ * 5/6\",\n                \"x4\": \"@xc@ + (1-@xc@) * 1/6\",\n                \"x5\": \"@xc@ + (1-@xc@) * 2/6\",\n                \"x6\": \"@xc@ + (1-@xc@) * 3/6\",\n                \"y1\": \"@PsatW@ / (1 - @x1@)\",\n                \"y2\": \"@PsatW@ / (1 - @x2@)\",\n                \"y3\": \"@PsatW@ / (1 - @x3@)\",\n                \"y4\": \"@PsatO@ / @x4@\",\n                \"y5\": \"@PsatO@ / @x5@\",\n                \"y6\": \"@PsatO@ / @x6@\"\n            }\n        },\n        \"questionelements\": [[{\n            \"type\": \"graph\",\n            \"graphinfo\": graphinfo,\n            \"mode\": \"move\",\n            \"answercount\": {\n                \"point\": 0,\n                \"line\": 0\n            },\n            \"answer\": {},\n            \"default\": {\n                \"point\": [],\n                \"line\": [{ \"points\": [{ \"x\": 0, \"y\": \"@Psum@\", \"radius\": 1, \"show\": false }, { \"x\": 1, \"y\": \"@Psum@\", \"radius\": 1, \"show\": false }], \"color\": graycolor }, { \"points\": [{ \"x\": \"0\", \"y\": \"@Psum@\", \"show\": false }, { \"x\": \"0\", \"y\": \"@PsatW@\", \"color\": watercolor }, { \"x\": \"@x1@\", \"y\": \"@y1@\", \"show\": false }, { \"x\": \"@x2@\", \"y\": \"@y2@\", \"show\": false }, { \"x\": \"@x3@\", \"y\": \"@y3@\", \"show\": false }, { \"x\": \"@xc@\", \"y\": \"@Psum@\", \"color\": \"green\" }],\n                    \"color\": graycolor,\n                    \"fill\": {\n                        \"color\": watercolor,\n                        \"opacity\": 0.2 } }, { \"points\": [{ \"x\": \"@xc@\", \"y\": \"@Psum@\", \"color\": \"green\" }, { \"x\": \"@x4@\", \"y\": \"@y4@\", \"show\": false }, { \"x\": \"@x5@\", \"y\": \"@y5@\", \"show\": false }, { \"x\": \"@x6@\", \"y\": \"@y6@\", \"show\": false }, { \"x\": \"1\", \"y\": \"@PsatO@\", \"color\": organiccolor }, { \"x\": \"1\", \"y\": \"@Psum@\", \"show\": false }],\n                    \"color\": graycolor,\n                    \"fill\": {\n                        \"color\": organiccolor,\n                        \"opacity\": 0.2 } }]\n            },\n            \"cursor\": normalcursor\n        }, // element\n        [{\n            \"type\": \"text\",\n            \"label\": \"In this demonstration, the user is led through a step-by-step procedure to create a temperature-composition diagram for two immiscible liquids (water and an organic) at a fixed pressure. The organic can be benzene, toluene, or n-hexane.<br><br>After answering, the user clicks \\\"Submit Answers\\\" to check their answers, followed by \\\"Next\\\" to proceed with the question. The user can only move forward or select \\\"Restart Problem\\\" to start over at a different temperature and a different organic. For any step, check \\\"Hint\\\" for help.\",\n            \"class\": \"prompt\"\n        }, {\n            \"type\": \"text\",\n            \"label\": \"Hint: click 'Begin' to start the problem\",\n            \"class\": \"hiddentext hint\"\n        }]]] // questionelements\n        // begin\n    } };\n\nvar problemController = new _ProblemController.ProblemController(problem, \"body\");\n\n//# sourceURL=webpack:///./prb/ImmiscibleP.js?");

/***/ }),

/***/ "./src/CanvasElement.js":
/*!******************************!*\
  !*** ./src/CanvasElement.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CanvasElement = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _DOM = __webpack_require__(/*! ./DOM.js */ \"./src/DOM.js\");\n\nvar _QuestionElement2 = __webpack_require__(/*! ./QuestionElement.js */ \"./src/QuestionElement.js\");\n\nvar _GraphInfo = __webpack_require__(/*! ./GraphInfo.js */ \"./src/GraphInfo.js\");\n\nvar _GraphCanvasController = __webpack_require__(/*! ./GraphCanvasController.js */ \"./src/GraphCanvasController.js\");\n\nvar _ZCanvas = __webpack_require__(/*! ./ZCanvas.js */ \"./src/ZCanvas.js\");\n\nvar _Point = __webpack_require__(/*! ./Point.js */ \"./src/Point.js\");\n\nvar _Line = __webpack_require__(/*! ./Line.js */ \"./src/Line.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar VAR = \"@\";\n\n/**\n    Container class for canvas-entry questions\n*/\n\nvar CanvasElement = exports.CanvasElement = function (_QuestionElement) {\n    _inherits(CanvasElement, _QuestionElement);\n\n    /**\n        @param {object} inputarguments\n        @param {string} inputarguments.mode (\"view, \"move\", \"draw\")\n        @param {object} inputarguments.answercount Number of elements allowed on graph at time\n        @param {object} inputarguments.answercount.point\n        @param {object} inputarguments.answercount.line\n        @param {list} inputarguments.answer Correct answers\n        @param {list} inputarguments.default {@link QuestionElements} that appear on graph by default\n        @param {object} inputarguments.tolerance Range above and below answer to accept\n        @param {float} inputarguments.tolerance.x\n        @param {float} inputarguments.tolerance.y\n        @param {int} inputarguments.points How many points this element is worth\n        @param {string} inputarguments.imgsrc (deprecated) Location of image source file\n        @param {Calibration} inputarguments.imgcal (deprecated) Calibration data for image\n    */\n    function CanvasElement(inputarguments) {\n        _classCallCheck(this, CanvasElement);\n\n        var _this = _possibleConstructorReturn(this, (CanvasElement.__proto__ || Object.getPrototypeOf(CanvasElement)).call(this, inputarguments));\n\n        if (!(_this.graphinfo instanceof _GraphInfo.GraphInfo)) {\n            // Convert graphinfo data into class instance\n            _this.graphinfo = new _GraphInfo.GraphInfo(_this.graphinfo);\n        }\n        return _this;\n    }\n\n    /**\n        Check user-submitted answers against correct answers\n        @param {Element} answer The correct answer\n        @return The score as a percentage (0 to 1)\n    */\n\n\n    _createClass(CanvasElement, [{\n        key: \"checkanswer\",\n        value: function checkanswer(answer) {\n            var score = { \"max\": 0,\n                \"got\": 0,\n                \"pct\": 0 };\n            var used = [];\n            if (this.answercount[\"point\"] > 0) {\n                // Each answer being looked for\n                for (var i in this.answer.point) {\n                    score.max += 1;\n                    // Each answer provided\n                    for (var j in answer) {\n                        if (answer[j] instanceof _Point.Point) {\n                            // If unused\n                            if (used.indexOf(j) === -1) {\n                                // If close enough\n                                if (Math.abs(answer[j].x - this.answer.point[i].x) <= this.answer.point[i].tolerance.x && Math.abs(answer[j].y - this.answer.point[i].y) <= this.answer.point[i].tolerance.y) {\n                                    score.got += 1;\n                                    used.push(j);\n                                    //points.splice(j);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (this.answercount[\"line\"] > 0) {\n                // Each answer being looked for\n                for (var _i in this.answer.line) {\n                    score.max += 1;\n                    var matchscore = 0;\n                    var matchindex = 0;\n                    // Each answer provided\n                    for (var _j in answer) {\n                        var mymatchscore = 0;\n                        var mymaxscore = 0;\n                        if (answer[_j] instanceof _Line.Line) {\n                            // If unused\n                            if (used.indexOf(_j) === -1) {\n                                // If same line size\n                                if (this.answer.line[_i].points.length === answer[_j].points.length) {\n                                    // Each point in the line\n                                    for (var k in answer[_j].points) {\n                                        if ((answer[_j].points[k].movex || answer[_j].points[k].movey) && this.answer.line[_i].points[k].answer) {\n                                            mymaxscore++;\n                                            // If point is not close enough\n                                            var ansx = this.answer.line[_i].points[k].x;\n                                            var inpx = answer[_j].points[k].x;\n                                            var tolx = this.answer.line[_i].tolerance.x;\n                                            var ansy = this.answer.line[_i].points[k].y;\n                                            var inpy = answer[_j].points[k].y;\n                                            var toly = this.answer.line[_i].tolerance.y;\n                                            if (Math.abs(ansx - inpx) <= tolx && Math.abs(ansy - inpy) <= toly) {\n                                                mymatchscore++;\n                                            }\n                                        }\n                                    }\n                                    if (mymatchscore > matchscore) {\n                                        mymatchscore = mymatchscore / mymaxscore;\n                                        matchscore = mymatchscore;\n                                        matchindex = _j;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (matchscore > 0) {\n                        score.got += matchscore;\n                        used.push(matchindex);\n                    }\n                }\n            }\n            if (score.max > 0) {\n                score.pct = score.got / score.max;\n            }\n            return score.pct;\n        }\n\n        /**\n            Generates the HTML for this element <br>\n            Includes a style tag to set the min-width to the graph width\n            @param {int} id Unique id to be included in the HTML elements\n        */\n\n    }, {\n        key: \"getHTML\",\n        value: function getHTML(id) {\n\n            var sk = _ZCanvas.ZCanvas.getHTMLSkeleton({\n                \"layers\": Object.keys(_GraphCanvasController.LAYERS).length,\n                \"width\": this.graphinfo.width,\n                \"height\": this.graphinfo.height,\n                \"containerid\": \"canvasarea--\" + id,\n                \"containerclass\": _DOM.DOM.canvasdivclass,\n                \"canvasidprefix\": \"canvas--\",\n                \"canvasclass\": _DOM.DOM.canvasclass\n            });\n            //console.log(sk);\n            return sk;\n\n            var html = \"<div style=\\\"min-width:\" + this.graphinfo.width + \"px; min-height:\" + this.graphinfo.height + \"px;\\\" class=\\\"\" + _DOM.DOM.canvasdivclass + \"\\\" id=\\\"\" + _DOM.DOM.canvasdivid + \"\\\">\";\n            html += \"<canvas class=\\\"\" + _DOM.DOM.canvasclass + \"\\\" id=\\\"\" + _DOM.DOM.staticcanvasid + \"\\\" style=\\\"z-index:1\\\"></canvas>\";\n            html += \"<canvas class=\\\"\" + _DOM.DOM.canvasclass + \"\\\" id=\\\"\" + _DOM.DOM.dynamiccanvasid + \"\\\" style=\\\"z-index:2\\\"></canvas>\";\n            html += \"</div>\";\n            html = html.replace(new RegExp(VAR + \"id\" + VAR, \"g\"), id);\n            return html;\n        }\n\n        /**\n            Inserts the HTML for a CanvasElement onto the page\n            @param {string} containerid HTML id of parent element\n            @param {int} id Unique id to be included in the HTML elements\n        */\n\n    }, {\n        key: \"insertHTML\",\n        value: function insertHTML(containerid, id) {\n            _get(CanvasElement.prototype.__proto__ || Object.getPrototypeOf(CanvasElement.prototype), \"insertHTML\", this).call(this, containerid, this.getHTML(id));\n            this.init(id);\n        }\n    }, {\n        key: \"init\",\n        value: function init(id) {\n            this.GraphCanvasController = new _GraphCanvasController.GraphCanvasController(id, this);\n        }\n    }]);\n\n    return CanvasElement;\n}(_QuestionElement2.QuestionElement);\n\n//# sourceURL=webpack:///./src/CanvasElement.js?");

/***/ }),

/***/ "./src/ChemFunctions.js":
/*!******************************!*\
  !*** ./src/ChemFunctions.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Antoine = Antoine;\nexports.InvAntoine = InvAntoine;\nexports.BubblePoint = BubblePoint;\nexports.DewPoint = DewPoint;\nexports.BubblePointT = BubblePointT;\nfunction Antoine(T, A, B, C) {\n    return Math.pow(10, A - B / (T + C));\n}\n\nfunction InvAntoine(P, A, B, C) {\n    return B / (A - Math.log10(P)) - C;\n}\n\nfunction BubblePoint(x, Psat1, Psat2) {\n    return x * Psat1 + (1 - x) * Psat2;\n}\n\nfunction DewPoint(x, Psat1, Psat2) {\n    return Math.pow(x / Psat1 + (1 - x) / Psat2, -1);\n}\n\nfunction BubblePointT(x, Antoine1, Antoine2, Tmin, Tmax, precision) {\n    return FindRoot({\n        expression: '@x2@ * Antoine(T, @AH@, @BH@, @CH@) + (1 - @x2@) * Antoine(T, @AO@, @BO@, @CO@) - @P@',\n        variable: 'T',\n        min: Tmin,\n        max: Tmax,\n        precision: precision\n    });\n}\n\n//# sourceURL=webpack:///./src/ChemFunctions.js?");

/***/ }),

/***/ "./src/DOM.js":
/*!********************!*\
  !*** ./src/DOM.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar VAR = \"@\";\n\n/**\n    Document object model for the page\n*/\nvar DOM = exports.DOM = {\n    \"problemdivid\": \"lce_problem\",\n    \"headerdivid\": \"header\",\n    \"bodydivid\": \"body\",\n    \"titledivid\": \"title\",\n    \"questiondivid\": \"question\",\n    \"canvasdivclass\": \"canvasarea\",\n    \"canvasdivid\": \"canvasarea--\" + VAR + \"id\" + VAR,\n    \"canvasclass\": \"canvas\",\n    \"canvasid\": \"canvas--\" + VAR + \"id\" + VAR,\n    \"staticcanvasid\": \"canvas--static--\" + VAR + \"id\" + VAR,\n    \"dynamiccanvasid\": \"canvas--dynamic--\" + VAR + \"id\" + VAR,\n    \"canvasinfodivclass\": \"canvasinfo\",\n    \"canvaspointclass\": \"canvaspoint\",\n    \"canvaspointid\": \"canvaspoint--\" + VAR + \"id\" + VAR,\n    \"canvasmodeclass\": \"canvasmode\",\n    \"canvasmodeid\": \"canvasmode--\" + VAR + \"id\" + VAR,\n    \"textboxdivclass\": \"textentry\",\n    \"textboxspanclass\": \"textboxlabel\",\n    \"textboxclass\": \"textbox\",\n    \"textboxid\": \"textbox--\" + VAR + \"id\" + VAR,\n    \"textboxanswerclass\": \"textboxanswer\",\n    \"textboxanswerid\": \"textboxanswer--\" + VAR + \"id\" + VAR,\n    \"textboxanswershown\": \"textboxanswershown\",\n    \"textspanclass\": \"textspan\",\n    \"buttonsdivid\": \"buttons\",\n    \"beginbuttonid\": \"beginbutton\",\n    \"restartbuttonid\": \"restartbutton\",\n    \"restartzeroid\": \"restartzero\",\n    \"restartoneid\": \"restartone\",\n    \"restartabortid\": \"restartabort\",\n    \"hintbuttonid\": \"hintbutton\",\n    \"submitbuttonid\": \"submitbutton\",\n    \"nextbuttonid\": \"nextbutton\",\n    \"scorebuttonid\": \"scorebutton\",\n    \"showgradebuttonid\": \"showgradebutton\",\n    \"feedbackbuttonid\": \"feedbackbutton\",\n    \"scoredivid\": \"scorediv\",\n    \"scoretitleid\": \"scoretitle\",\n    \"currentquestionid\": \"currentquestion\",\n    \"lastscorerowid\": \"lastscorerow\",\n    \"gradedivid\": \"submitgrade\",\n    \"gradeformid\": \"gradeform\",\n    \"gradenametextid\": \"gradenametext\",\n    \"gradecuidtextid\": \"gradecuidtext\",\n    \"gradecoursetextid\": \"gradeclasstext\",\n    \"submitgradebuttonid\": \"submitgradebutton\",\n    \"gradeservererrorid\": \"gradeservererror\",\n    \"feedbackdivid\": \"feedback\",\n    \"feedbackformid\": \"feedbackform\",\n    \"feedbacknametextid\": \"feedbacknametext\",\n    \"feedbackemailtextid\": \"feedbackemailtext\",\n    \"feedbackinputtextid\": \"feedbackinputtext\",\n    \"submitfeedbackbuttonid\": \"submitfeedbackbutton\",\n    \"feedbackservererrorid\": \"feedbackservererror\",\n    \"modaldivid\": \"modaldiv\",\n    \"modalclass\": \"modal\",\n    \"restartmodal\": \"restartmodal\",\n    \"gradesubmitmodal\": \"gradesubmitmodal\",\n    \"feedbackmodal\": \"feedbackmodal\",\n    \"footerdivid\": \"footer\",\n    \"hiddentextclass\": \"hiddentext\",\n    \"hiddenclass\": \"hidden\",\n    \"disabledclass\": \"disabled\",\n    \"hidescoreclass\": \"hidescore\",\n\n    \"tipboxdivclass\": \"tipbox\",\n    \"tipboxdivid\": \"tipbox--\" + VAR + \"id\" + VAR,\n    \"tipboxtextclass\": \"tiptext\",\n    \"tipboxcheckid\": \"tipcheck--\" + VAR + \"id\" + VAR,\n    \"tipboxdontshowclass\": \"tipdontshow\",\n    \"tipboxbuttonclass\": \"tipbutton\",\n    \"tipboxbuttonid\": \"tipbutton--\" + VAR + \"id\" + VAR\n};\n\n//# sourceURL=webpack:///./src/DOM.js?");

/***/ }),

/***/ "./src/GraphCanvasController.js":
/*!**************************************!*\
  !*** ./src/GraphCanvasController.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.GraphCanvasController = exports.LAYERS = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _DOM = __webpack_require__(/*! ./DOM.js */ \"./src/DOM.js\");\n\nvar _Text = __webpack_require__(/*! ./Text.js */ \"./src/Text.js\");\n\nvar _Line = __webpack_require__(/*! ./Line.js */ \"./src/Line.js\");\n\nvar _Point = __webpack_require__(/*! ./Point.js */ \"./src/Point.js\");\n\nvar _ZCanvas = __webpack_require__(/*! ./ZCanvas.js */ \"./src/ZCanvas.js\");\n\nvar _skyHelpers = __webpack_require__(/*! ./sky-helpers.js */ \"./src/sky-helpers.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VAR = \"@\";\nvar GRABRADIUS = 10;\nvar SPVAR = \"~\";\n\n// Layer information\nvar LAYERS = exports.LAYERS = {\n    \"GRID\": 0,\n    \"UNDER\": 1,\n    \"FRAME\": 2,\n    \"OVER\": 3,\n    \"CURSOR\": 4\n};\n\n/**\n    Controller class for HTML canvas objects<br>\n    Uses two overlaid canvases for background and foreground drawing.\n*/\n\nvar GraphCanvasController = exports.GraphCanvasController = function () {\n    /**\n        @param {int} index Index to identify canvas\n        @param {object} args Object of input arguments\n        @param {int} args.layers Number of layers\n        @param {int} args.width Width of canvases\n        @param {int} args.height Height of canvases\n        @param {string} args.containerid ID of container element\n        @param {string} args.containerclass class of container element\n        @param {string} args.canvasidprefix ID of each canvas, postpended by its layer number\n        @param {string} args.canvasclass Classes added to each canvas\n        @param {object} args.cursor Object describing how the cursor should look (used as cursordata for {@link GraphCanvasController#drawCursor})\n        @param {string} args.mode Valid modes are \"none\", \"view\", \"move\"\n        @param {object} args.answercount Maximum number of elements to allow on graph\n        @param {int} args.answercount.point\n        @param {int} args.answercount.line\n        @param {object} args.default Default elements that exist on graph\n        @param {list} args.default.point\n        @param {list} args.default.line\n    */\n    function GraphCanvasController(index, args) {\n        var _this = this;\n\n        _classCallCheck(this, GraphCanvasController);\n\n        // Pull in arguments\n        this.mode = args.mode;\n        this.graphinfo = args.graphinfo;\n        this.cursor = args.cursor;\n\n        // Unique number for this canvas\n        this.index = index;\n        var re = new RegExp(VAR + \"id\" + VAR, \"g\");\n\n        // Retrieve DOM elements\n        var zc = new _ZCanvas.ZCanvas({\n            \"layers\": Object.keys(LAYERS).length,\n            \"width\": this.graphinfo.width,\n            \"height\": this.graphinfo.height,\n            \"containerid\": \"canvasarea--\" + index,\n            \"containerclass\": _DOM.DOM.canvasdivclass,\n            \"canvasidprefix\": \"canvas--\",\n            \"canvasclass\": _DOM.DOM.canvasclass\n        });\n        this.canvas = zc.canvas;\n        this.ctx = zc.ctx;\n\n        // Set up canvas size\n        this.height = this.graphinfo.height;\n        this.width = this.graphinfo.width;\n\n        // Draw graph layout\n        this.drawGraph();\n\n        // State variables\n        this.drawing = false; /* True when not finished drawing */\n\n        // Constants\n        this.grabradius = GRABRADIUS;\n\n        this.max = [];\n        this.finished = [];\n        // Set max elements of each type, if specified\n        if (args.answercount != undefined) {\n            this.max = args.answercount;\n        }\n        // Set default elements of each type, if specified\n        if (args.default != undefined) {\n            this.default = [];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = Object.keys(args.default)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var type = _step.value;\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                        for (var _iterator2 = args.default[type][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                            var d = _step2.value;\n\n                            this.finished.push(this.dataToElement(type, d));\n                        }\n                    } catch (err) {\n                        _didIteratorError2 = true;\n                        _iteratorError2 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                _iterator2.return();\n                            }\n                        } finally {\n                            if (_didIteratorError2) {\n                                throw _iteratorError2;\n                            }\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n\n        // Set up mouse events\n        this.canvas[\"top\"].addEventListener(\"mousemove\", function (e) {\n            return _this.mouseMove(e);\n        });\n        this.canvas[\"top\"].addEventListener(\"mousedown\", function (e) {\n            return _this.mouseDown(e);\n        });\n        this.canvas[\"top\"].addEventListener(\"mouseup\", function (e) {\n            return _this.mouseUp(e);\n        });\n\n        // Initialize\n        this.update();\n    }\n\n    /**\n        Clears the foreground canvas\n    */\n\n\n    _createClass(GraphCanvasController, [{\n        key: \"clear\",\n        value: function clear() {\n            //this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);\n            // Hacky workaround\n            this.canvas[LAYERS.UNDER].width = this.canvas[LAYERS.UNDER].width;\n            this.canvas[LAYERS.OVER].width = this.canvas[LAYERS.OVER].width;\n            this.canvas[LAYERS.CURSOR].width = this.canvas[LAYERS.CURSOR].width;\n        }\n\n        /**\n            Updates the canvas to its current state\n        */\n\n    }, {\n        key: \"update\",\n        value: function update() {\n            this.clear();\n            // Remove objects if over limits\n            if (this.mode != \"view\") {\n                this.trimLists();\n            }\n            // Draw lines\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this.finished[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var obj = _step3.value;\n\n                    if (obj instanceof _Line.Line) {\n                        this.draw(obj);\n                    }\n                }\n                // Draw points\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = this.finished[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var _obj = _step4.value;\n\n                    if (_obj instanceof _Point.Point) {\n                        this.draw(_obj);\n                    }\n                }\n                // Draw text\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n                for (var _iterator5 = this.finished[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var _obj2 = _step5.value;\n\n                    if (_obj2 instanceof _Text.Text) {\n                        this.draw(_obj2);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                        _iterator5.return();\n                    }\n                } finally {\n                    if (_didIteratorError5) {\n                        throw _iteratorError5;\n                    }\n                }\n            }\n        }\n        /**\n            Creates geometric class object from input data\n            @param {string} type \"point\", \"line\", or \"text\"\n            @param {object} data Object of input arguments for object\n            @return {Point|Line|Text} An instance of the chosen class\n        */\n\n    }, {\n        key: \"dataToElement\",\n        value: function dataToElement(type, data) {\n            // Append calibration data\n            data.graphinfo = this.graphinfo;\n            // Create appropriate object\n            if (type === \"point\") {\n                return new _Point.Point(data);\n            } else if (type === \"line\") {\n                var ptlist = [];\n                if (data.points) {\n                    // line constructed from list of points\n                    var _iteratorNormalCompletion6 = true;\n                    var _didIteratorError6 = false;\n                    var _iteratorError6 = undefined;\n\n                    try {\n                        for (var _iterator6 = data.points[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                            var ptdata = _step6.value;\n\n                            ptdata.graphinfo = this.graphinfo;\n                            var pt = new _Point.Point(ptdata);\n                            ptlist.push(pt);\n                            if (pt.show) {\n                                this.finished.push(pt);\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError6 = true;\n                        _iteratorError6 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                                _iterator6.return();\n                            }\n                        } finally {\n                            if (_didIteratorError6) {\n                                throw _iteratorError6;\n                            }\n                        }\n                    }\n\n                    data.points = ptlist;\n                } else if (data.equation) {\n                    // line constructed from equation\n                    var ind = data.independent;\n                    var dep = data.dependent;\n                    var di = (ind.max - ind.min) / (data.steps - 1);\n                    // Replace independent variable with value\n                    var re = new RegExp(\"\" + SPVAR + data.independent.symbol + SPVAR, \"g\");\n\n                    // Calculate points along line\n                    var i = ind.min;\n                    while (i <= ind.max) {\n                        var _ptdata = {};\n                        _ptdata[ind.symbol] = i;\n                        // Evaluate expression (trusted code provided by the question-creator)\n                        _ptdata[dep.symbol] = (0, _skyHelpers.evalWithContext)(data.equation.replace(re, i));\n                        _ptdata[\"graphinfo\"] = this.graphinfo;\n                        if (data.showpoints) {\n                            _ptdata.show = true;\n                        } else {\n                            _ptdata.show = false;\n                        }\n                        var _pt = new _Point.Point(_ptdata);\n                        ptlist.push(_pt);\n                        if (_pt.show) {\n                            this.finished.push(_pt);\n                        }\n\n                        i += di;\n                    }\n                    if (data.label) {\n                        // Calculate y position\n                        data.label.dependent = (0, _skyHelpers.evalWithContext)(data.equation.replace(re, data.label.independent));\n                        // Calculate slope\n                        var nextpt = (0, _skyHelpers.evalWithContext)(data.equation.replace(re, data.label.independent + di));\n                        var dy = nextpt - data.label.dependent;\n                        var slope = Math.atan(dy * this.graphinfo.y.scale / (di * this.graphinfo.x.scale));\n                        data.label.rotate = 180 / Math.PI * slope;\n                        // Adjust for offset\n                        data.label.independent += data.label.indoffset;\n                        data.label.dependent += data.label.depoffset;\n                    }\n                    data.points = ptlist;\n                }\n                return new _Line.Line(data);\n            } else if (type === \"text\") {\n                data.position.graphinfo = this.graphinfo;\n                return new _Text.Text(data);\n            }\n        }\n        /**\n            @param {event} e Mouse event\n            @return {Point} Point object at the current location of the mouse cursor\n        */\n\n    }, {\n        key: \"getMousePoint\",\n        value: function getMousePoint(e) {\n            return new _Point.Point({ \"rawx\": e.pageX - this.canvas[LAYERS.CURSOR].offsetParent.offsetLeft,\n                \"rawy\": e.pageY - this.canvas[LAYERS.CURSOR].offsetParent.offsetTop,\n                \"graphinfo\": this.graphinfo });\n        }\n        /**\n            Draws an element to the foreground canvas<br>\n            To be replaced with Object.draw() calls\n            @param {Point|Line|Text} element QuestionElement to be drawn\n        */\n\n    }, {\n        key: \"draw\",\n        value: function draw(element) {\n            var layer = undefined;\n            if (element.layer) {\n                layer = element.layer;\n            }\n            this.ctx[element.layer];\n            this.ctx[layer].save();\n            element.draw(this.ctx[layer]);\n            this.ctx[layer].restore();\n        }\n        /**\n            Draws the background of the graph (background colors, axes, labels)<br>\n            Needs serious revision\n        */\n\n    }, {\n        key: \"drawGraph\",\n        value: function drawGraph() {\n            // Border region\n            this.ctx[LAYERS.FRAME].fillStyle = this.graphinfo.axesbackground;\n            this.ctx[LAYERS.FRAME].fillRect(0, 0, this.graphinfo.width, this.graphinfo.graphtop);\n            this.ctx[LAYERS.FRAME].fillRect(0, 0, this.graphinfo.graphleft, this.graphinfo.height);\n            this.ctx[LAYERS.FRAME].fillRect(this.graphinfo.graphright, 0, this.graphinfo.width, this.graphinfo.height);\n            this.ctx[LAYERS.FRAME].fillRect(0, this.graphinfo.graphbottom, this.graphinfo.width, this.graphinfo.height);\n\n            // Graph region\n            this.ctx[LAYERS.GRID].fillStyle = this.graphinfo.graphbackground;\n            this.ctx[LAYERS.GRID].fillRect(this.graphinfo.padding.left, this.graphinfo.padding.top, this.graphinfo.graphwidth, this.graphinfo.graphheight);\n\n            // TODO use text measuring to place label text\n\n            // X axis\n            if (this.graphinfo.x != undefined) {\n                this.drawAxis({\n                    axisinfo: this.graphinfo.x,\n                    stepStart: this.graphinfo.padding.left,\n                    stepLimit: this.graphinfo.width - this.graphinfo.padding.right,\n                    axisY0: this.graphinfo.height - this.graphinfo.padding.bottom,\n                    axisY1: this.graphinfo.padding.top,\n                    tickSign: -1,\n                    numberOffset: 10,\n                    labelX: this.graphinfo.graphwidth / 2 + this.graphinfo.padding.left,\n                    labelY: this.graphinfo.height - this.graphinfo.padding.bottom + 40,\n                    labelrotate: 0\n                });\n            }\n            // Y axis\n            if (this.graphinfo.y != undefined) {\n                this.drawAxis({\n                    axisinfo: this.graphinfo.y,\n                    stepStart: this.graphinfo.padding.top,\n                    stepLimit: this.height - this.graphinfo.padding.bottom,\n                    axisX0: this.graphinfo.padding.left,\n                    axisX1: this.graphinfo.padding.left + this.graphinfo.graphwidth,\n                    tickSign: 1,\n                    numberOffset: -20,\n                    labelX: this.graphinfo.padding.left - 50,\n                    labelY: this.graphinfo.graphheight / 2 + this.graphinfo.padding.top,\n                    labelrotate: -90\n                });\n            }\n            // X2 axis\n            if (this.graphinfo.x2 != undefined) {\n                this.drawAxis({\n                    axisinfo: this.graphinfo.x2,\n                    stepStart: this.graphinfo.padding.left,\n                    stepLimit: this.graphinfo.width - this.graphinfo.padding.right,\n                    axisY0: this.graphinfo.padding.top,\n                    axisY1: this.graphinfo.height - this.graphinfo.padding.bottom,\n                    tickSign: 1,\n                    numberOffset: -11,\n                    labelX: this.graphinfo.graphwidth / 2 + this.graphinfo.padding.left,\n                    labelY: this.graphinfo.padding.top - 40,\n                    labelrotate: 0\n                });\n            }\n            // Y2 axis\n            if (this.graphinfo.y2 != undefined) {\n                this.drawAxis({\n                    // TODO test values to make sure they display well\n                    axisinfo: this.graphinfo.y2,\n                    stepStart: this.graphinfo.padding.top,\n                    stepLimit: this.height - this.graphinfo.padding.bottom,\n                    axisX0: this.graphinfo.padding.left,\n                    axisX1: this.graphinfo.padding.left + this.graphinfo.graphwidth,\n                    tickSign: -1,\n                    numberOffset: 20,\n                    labelX: this.graphinfo.padding.left + this.graphinfo.graphwidth + 40,\n                    labelY: this.graphinfo.graphheight / 2 + this.graphinfo.padding.top,\n                    labelrotate: 90\n                });\n            }\n            // Bounding box\n            this.ctx[LAYERS.FRAME].rect(this.graphinfo.padding.left, this.graphinfo.padding.top, this.graphinfo.graphwidth, this.graphinfo.graphheight);\n            this.ctx[LAYERS.FRAME].strokeStyle = \"black\";\n            this.ctx[LAYERS.FRAME].lineWidth = 1;\n            this.ctx[LAYERS.FRAME].stroke();\n        }\n        /**\n            Abstract method to replace drawGraph\n        */\n\n    }, {\n        key: \"drawAxis\",\n        value: function drawAxis(args) {\n            // Constants\n            var MajorAxisTickLength = 10;\n            var MinorAxisTickLength = 5;\n            var LabelDigits = 3;\n            var LabelxDigits = LabelDigits;\n            var LabelyDigits = LabelDigits;\n            var Labelx2Digits = LabelDigits;\n            var Labely2Digits = LabelDigits;\n            var GridColor = \"lightgray\";\n            var GridThickness = 1;\n            var TickColor = \"gray\";\n            var TickThickness = 1;\n            var TextColor = \"black\";\n            var TextFont = \"sans-serif\";\n            var TextFontSize = 20;\n            var TextFontStyle = \"\";\n\n            var pt = 0;\n            var txt = \"\";\n\n            // Draw gridlines\n            this.ctx[LAYERS.GRID].strokeStyle = GridColor;\n            this.ctx[LAYERS.GRID].lineWidth = GridThickness;\n            for (var i = args.stepStart; i <= args.stepLimit; i += Math.abs(args.axisinfo.gridline * args.axisinfo.scale)) {\n                this.ctx[LAYERS.GRID].beginPath();\n                if (args.axisY0 && args.axisY1) {\n                    this.ctx[LAYERS.GRID].moveTo(i, args.axisY0);\n                    this.ctx[LAYERS.GRID].lineTo(i, args.axisY1);\n                } else if (args.axisX0 && args.axisX1) {\n                    this.ctx[LAYERS.GRID].moveTo(args.axisX0, i);\n                    this.ctx[LAYERS.GRID].lineTo(args.axisX1, i);\n                }\n                this.ctx[LAYERS.GRID].stroke();\n            }\n            // Draw minor ticks\n            this.ctx[LAYERS.FRAME].strokeStyle = TickColor;\n            this.ctx[LAYERS.FRAME].lineWidth = TickThickness;\n            for (var _i = args.stepStart; _i <= args.stepLimit; _i += Math.abs(args.axisinfo.minortick * args.axisinfo.scale)) {\n                this.ctx[LAYERS.FRAME].beginPath();\n                if (args.axisY0 && args.axisY1) {\n                    this.ctx[LAYERS.FRAME].moveTo(_i, args.axisY0);\n                    this.ctx[LAYERS.FRAME].lineTo(_i, args.axisY0 + args.tickSign * MinorAxisTickLength);\n                } else if (args.axisX0 && args.axisX1) {\n                    this.ctx[LAYERS.FRAME].moveTo(args.axisX0, _i);\n                    this.ctx[LAYERS.FRAME].lineTo(args.axisX0 + args.tickSign * MinorAxisTickLength, _i);\n                }\n                this.ctx[LAYERS.FRAME].stroke();\n            }\n            // Draw major ticks and numbers\n            for (var _i2 = args.stepStart; _i2 <= args.stepLimit; _i2 += Math.abs(args.axisinfo.majortick * args.axisinfo.scale)) {\n                this.ctx[LAYERS.FRAME].beginPath();\n                this.ctx[LAYERS.FRAME].strokeStyle = TickColor;\n                if (args.axisY0 && args.axisY1) {\n                    this.ctx[LAYERS.FRAME].moveTo(_i2, args.axisY0);\n                    this.ctx[LAYERS.FRAME].lineTo(_i2, args.axisY0 + args.tickSign * MajorAxisTickLength);\n                    txt = (0, _skyHelpers.roundTo)(args.axisinfo.RawToCal(_i2), LabelDigits);\n                    pt = new _Point.Point({ rawx: _i2, rawy: args.axisY0 + args.numberOffset, graphinfo: this.graphinfo });\n                } else if (args.axisX0 && args.axisX1) {\n                    this.ctx[LAYERS.FRAME].moveTo(args.axisX0, _i2);\n                    this.ctx[LAYERS.FRAME].lineTo(args.axisX0 + args.tickSign * MajorAxisTickLength, _i2);\n                    txt = (0, _skyHelpers.roundTo)(args.axisinfo.RawToCal(_i2), LabelDigits);\n                    pt = new _Point.Point({ rawx: args.axisX0 + args.numberOffset, rawy: _i2, graphinfo: this.graphinfo });\n                }\n                this.ctx[LAYERS.FRAME].stroke();\n\n                new _Text.Text({\n                    \"text\": txt,\n                    \"align\": \"center\",\n                    \"color\": TextColor,\n                    \"font\": TextFont,\n                    \"fontsize\": TextFontSize,\n                    \"fontstyle\": TextFontStyle,\n                    \"position\": pt\n                }).draw(this.ctx[LAYERS.FRAME]);\n            }\n\n            // Draw label\n            new _Text.Text({\n                \"text\": args.axisinfo.label,\n                \"align\": \"center\",\n                \"color\": TextColor,\n                \"font\": TextFont,\n                \"fontsize\": TextFontSize,\n                \"fontstyle\": TextFontStyle,\n                \"position\": new _Point.Point({ rawx: args.labelX, rawy: args.labelY, graphinfo: this.graphinfo }),\n                graphinfo: this.graphinfo,\n                rotate: args.labelrotate\n            }).draw(this.ctx[LAYERS.FRAME]);\n        }\n        /**\n            Checks each type of element (point, line, etc) and removes the oldest member(s) if more than the maximum exist\n        */\n\n    }, {\n        key: \"trimLists\",\n        value: function trimLists() {\n            var quota = {};\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n                for (var _iterator7 = Object.keys(this.max)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                    var type = _step7.value;\n\n                    quota[type] = this.max[type];\n                }\n            } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                        _iterator7.return();\n                    }\n                } finally {\n                    if (_didIteratorError7) {\n                        throw _iteratorError7;\n                    }\n                }\n            }\n\n            for (var i = this.finished.length - 1; i >= 0; i--) {\n                var obj = this.finished[i];\n                if (obj.answer) {\n                    if (obj instanceof _Point.Point) {\n                        if (quota[\"point\"] != undefined) {\n                            if (quota[\"point\"] > 0) {\n                                quota[\"point\"] -= 1;\n                            } else {\n                                this.finished.splice(this.finished.indexOf(obj), 1);\n                            }\n                        }\n                    } else if (obj instanceof _Line.Line) {\n                        if (quota[\"line\"] != undefined) {\n                            if (quota[\"line\"] > 0) {\n                                quota[\"line\"] -= 1;\n                            } else {\n                                this.finished.splice(this.finished.indexOf(obj), 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n            Finds a point in the list of drawn objects by its {@link Point#ID}\n            @return {Point}\n        */\n\n    }, {\n        key: \"getPointByID\",\n        value: function getPointByID(ID) {\n            var _iteratorNormalCompletion8 = true;\n            var _didIteratorError8 = false;\n            var _iteratorError8 = undefined;\n\n            try {\n                for (var _iterator8 = this.finished[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                    var pt = _step8.value;\n\n                    if (pt instanceof _Point.Point) {\n                        if (pt.ID === ID) {\n                            return pt;\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError8 = true;\n                _iteratorError8 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                        _iterator8.return();\n                    }\n                } finally {\n                    if (_didIteratorError8) {\n                        throw _iteratorError8;\n                    }\n                }\n            }\n        }\n        /**\n            Deletes a point in the list of drawn objects by its {@link Point#ID}\n        */\n\n    }, {\n        key: \"deletePointByID\",\n        value: function deletePointByID(ID) {\n            var _iteratorNormalCompletion9 = true;\n            var _didIteratorError9 = false;\n            var _iteratorError9 = undefined;\n\n            try {\n                for (var _iterator9 = this.finished[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                    var pt = _step9.value;\n\n                    if (pt instanceof _Point.Point) {\n                        if (pt.ID === ID) {\n                            this.finished.splice(this.finished.indexOf(pt), 1);\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError9 = true;\n                _iteratorError9 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                        _iterator9.return();\n                    }\n                } finally {\n                    if (_didIteratorError9) {\n                        throw _iteratorError9;\n                    }\n                }\n            }\n        }\n        /**\n            Returns all finished elements on the graph marked as answers ({@link QuestionElement#answer})\n            @return {list} A list of {@link QuestionElement}s\n        */\n\n    }, {\n        key: \"getanswers\",\n        value: function getanswers() {\n            this.mode = \"view\";\n            this.update();\n            var answers = [];\n            var _iteratorNormalCompletion10 = true;\n            var _didIteratorError10 = false;\n            var _iteratorError10 = undefined;\n\n            try {\n                for (var _iterator10 = this.finished[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                    var element = _step10.value;\n\n                    if (element.answer) {\n                        answers.push(element);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                        _iterator10.return();\n                    }\n                } finally {\n                    if (_didIteratorError10) {\n                        throw _iteratorError10;\n                    }\n                }\n            }\n\n            return answers;\n        }\n        /**\n            Displays a set of elements as correct answers\n            @param {list} answers List of {@link QuestionElement}s\n        */\n\n    }, {\n        key: \"showanswers\",\n        value: function showanswers(answers) {\n            var answerselements = [];\n            // Convert answer data into geometric object elements\n            var _iteratorNormalCompletion11 = true;\n            var _didIteratorError11 = false;\n            var _iteratorError11 = undefined;\n\n            try {\n                for (var _iterator11 = Object.keys(answers)[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                    var type = _step11.value;\n                    var _iteratorNormalCompletion13 = true;\n                    var _didIteratorError13 = false;\n                    var _iteratorError13 = undefined;\n\n                    try {\n                        for (var _iterator13 = answers[type][Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                            var data = _step13.value;\n\n                            data[\"correctanswer\"] = true;\n                            var ans = this.dataToElement(type, data);\n                            //answerselements.push(ans);\n                            this.finished.push(ans);\n                        }\n                    } catch (err) {\n                        _didIteratorError13 = true;\n                        _iteratorError13 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                                _iterator13.return();\n                            }\n                        } finally {\n                            if (_didIteratorError13) {\n                                throw _iteratorError13;\n                            }\n                        }\n                    }\n                }\n                // Draw all answers\n            } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                        _iterator11.return();\n                    }\n                } finally {\n                    if (_didIteratorError11) {\n                        throw _iteratorError11;\n                    }\n                }\n            }\n\n            this.update();\n            var _iteratorNormalCompletion12 = true;\n            var _didIteratorError12 = false;\n            var _iteratorError12 = undefined;\n\n            try {\n                for (var _iterator12 = answerselements[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                    var answer = _step12.value;\n\n                    this.draw(answer);\n                }\n            } catch (err) {\n                _didIteratorError12 = true;\n                _iteratorError12 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                        _iterator12.return();\n                    }\n                } finally {\n                    if (_didIteratorError12) {\n                        throw _iteratorError12;\n                    }\n                }\n            }\n        }\n        /**\n            Displays cursor data next to the mouse cursor\n            @param {Point} cursorpt Location of the cursor\n            @param {object} cursordata How the cursor data should look\n            @param {string} [cursordata.color=\"black\"] What color the text is written in\n            @param {string} [cursordata.font=\"sans-serif\"] What font the text is written in\n            @param {string} [cursordata.fontsize=\"16\"] What size the text is written in (in px)\n            @param {string} [cursordata.fontstyle=\"bold\"] What style the text is written in\n            @param {string} cursordata.format Format of the string to display (use ~x~, ~x2~, ~y~, or ~y2~ for relevant coordinate)\n            @param {object} cursordata.digits How many digits to round to for each axis. If using an axis in cursordata.format, it must have a number of digits set.\n            @param {int} cursordata.digits.x\n            @param {int} cursordata.digits.x2\n            @param {int} cursordata.digits.y\n            @param {int} cursordata.digits.y2\n            @param {number} [cursordata.distance=25] Distance from the center of the cursor to the text display\n        */\n\n    }, {\n        key: \"drawCursor\",\n        value: function drawCursor(cursorpt, cursordata) {\n            // Bound cursor within graph\n            if (cursorpt.x) {\n                cursorpt.x = (0, _skyHelpers.constrain)(cursorpt.x, this.graphinfo.x.min, this.graphinfo.x.max);\n            }\n            if (cursorpt.y) {\n                cursorpt.y = (0, _skyHelpers.constrain)(cursorpt.y, this.graphinfo.y.min, this.graphinfo.y.max);\n            }\n            if (cursorpt.x2) {\n                cursorpt.x2 = (0, _skyHelpers.constrain)(cursorpt.x2, this.graphinfo.x2.min, this.graphinfo.x2.max);\n            }\n            if (cursorpt.y2) {\n                cursorpt.y2 = (0, _skyHelpers.constrain)(cursorpt.y2, this.graphinfo.y2.min, this.graphinfo.y2.max);\n            }\n            cursorpt.generateRawFromCal();\n\n            // Align text around cursor\n            var midx = this.graphinfo.graphwidth / 2 + this.graphinfo.padding.left;\n            var midy = this.graphinfo.graphheight / 2 + this.graphinfo.padding.top;\n            var theta = (0, _skyHelpers.getAngle)(cursorpt.rawx, cursorpt.rawy, midx, midy);\n            var cursoralign = 0;\n            var cursorvalign = 0.5;\n            if (theta >= Math.PI) {\n                cursoralign = -theta / Math.PI + 2;\n            } else {\n                cursoralign = theta / Math.PI;\n            }\n            // Default cursor value\n            cursordata.distance = cursordata.distance ? cursordata.distance : 25;\n\n            // Calculate text display location\n            var cursorrawx = cursorpt.rawx;\n            var cursorrawy = cursorpt.rawy;\n            var edgemargin = 5;\n            if (cursorrawx <= this.graphinfo.graphleft) {\n                cursoralign = 0;\n                cursorrawx = this.graphinfo.graphleft + edgemargin;\n            } else if (cursorrawx >= this.graphinfo.graphright) {\n                cursoralign = 1;\n                cursorrawx = this.graphinfo.graphright - edgemargin;\n            } else {\n                cursorrawx += cursordata.distance * Math.cos(theta) / Math.sqrt(Math.abs(Math.cos(theta)));\n            }\n            if (cursorrawy <= this.graphinfo.graphtop) {\n                cursorvalign = 1;\n                cursorrawy = this.graphinfo.graphtop + edgemargin;\n            } else if (cursorrawy >= this.graphinfo.graphbottom) {\n                cursorvalign = 0;\n                cursorrawy = this.graphinfo.graphbottom - edgemargin;\n            } else {\n                cursorrawy += cursordata.distance * Math.sin(theta) / Math.sqrt(Math.abs(Math.sin(theta)));\n            }\n\n            // Fill default arguments\n            var cursorcolor = \"black\";\n            if (cursordata.color != undefined) {\n                cursorcolor = cursordata.color;\n            }\n            var cursorfont = \"sans-serif\";\n            if (cursordata.font != undefined) {\n                cursorfont = cursordata.font;\n            }\n            var cursorfontsize = \"16\";\n            if (cursordata.fontsize != undefined) {\n                cursorfontsize = cursordata.fontsize;\n            }\n            var cursorfontstyle = \"bold\";\n            if (cursordata.fontstyle != undefined) {\n                cursorfontstyle = cursordata.fontstyle;\n            }\n            // Generate text based on cursordata format\n            var content = cursordata.format;\n            if (this.graphinfo.x != undefined) {\n                content = content.replace(SPVAR + \"x\" + SPVAR, cursorpt.x.toFixed(this.cursor.digits.x));\n            }\n            if (this.graphinfo.y != undefined) {\n                content = content.replace(SPVAR + \"y\" + SPVAR, cursorpt.y.toFixed(this.cursor.digits.y));\n            }\n            if (this.graphinfo.x2 != undefined) {\n                content = content.replace(SPVAR + \"x2\" + SPVAR, cursorpt.x2.toFixed(this.cursor.digits.x2));\n            }\n            if (this.graphinfo.y2 != undefined) {\n                content = content.replace(SPVAR + \"y2\" + SPVAR, cursorpt.y2.toFixed(this.cursor.digits.y2));\n            }\n\n            // Draw text\n            var cp = new _Point.Point({\n                \"rawx\": cursorrawx,\n                \"rawy\": cursorrawy,\n                \"graphinfo\": cursorpt.graphinfo,\n                \"show\": false,\n                \"label\": {\n                    \"text\": content,\n                    \"color\": cursorcolor,\n                    \"font\": cursorfont,\n                    \"fontsize\": cursorfontsize,\n                    \"fontstyle\": cursorfontstyle,\n                    \"align\": cursoralign,\n                    \"valign\": cursorvalign } });\n            this.draw(cp);\n            //this.draw(new Text());\n        }\n    }, {\n        key: \"grabElement\",\n        value: function grabElement(pt) {\n            var grabindex = -1;\n            var grabdist = 99999;\n            // Check which object is being picked up\n            for (var i in this.finished) {\n                if (this.finished[i] instanceof _Point.Point) {\n                    // Check if movable\n                    if (this.finished[i].movex || this.finished[i].movey) {\n                        // Check if in grabbing distance\n                        var d = (0, _skyHelpers.getDist)(pt, this.finished[i], \"raw\");\n                        if (d <= this.grabradius) {\n                            if (d < grabdist) {\n                                grabindex = i;\n                                grabdist = d;\n                            }\n                        }\n                    }\n                } else if (this.finished[i] instanceof _Line.Line) {\n                    for (var j = 1; j < this.finished[i].points.length; j++) {\n                        var pt1 = this.finished[i].points[j];\n                        var pt2 = this.finished[i].points[j - 1];\n                        // If either point is immovable, line isn't movable\n                        if (!pt1.movex && !pt1.movey || !pt2.movex && !pt2.movey) {\n                            // If any point is immobile, the line cannot be moved\n                            break;\n                        }\n                        // Shrink grabbing range for line (otherwise assume grabbing a point on either end)\n                        var minx = Math.min(pt1.rawx, pt2.rawx) + this.grabradius;\n                        var maxx = Math.max(pt1.rawx, pt2.rawx) - this.grabradius;\n                        // Check if clicked x is between bounds\n                        if (pt.rawx > minx && pt.rawx < maxx) {\n                            var ytarget = (pt.rawx - pt1.rawx) * (pt2.rawy - pt1.rawy) / (pt2.rawx - pt1.rawx) + pt1.rawy;\n                            var _d = Math.abs(pt.rawy - ytarget);\n                            // Check if in grabbing range of the line\n                            if (_d <= this.grabradius) {\n                                // Check if this is the closest object\n                                if (_d < grabdist) {\n                                    grabindex = i;\n                                    grabdist = _d;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If an element was clicked on, pick it up\n            if (grabindex > -1) {\n                this.grabpoint = pt;\n                this.held = this.finished[grabindex];\n                this.finished.splice(grabindex, 1);\n                if (this.held instanceof _Line.Line) {\n                    this.origins = {};\n                    var _iteratorNormalCompletion14 = true;\n                    var _didIteratorError14 = false;\n                    var _iteratorError14 = undefined;\n\n                    try {\n                        for (var _iterator14 = this.held.points[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                            var p = _step14.value;\n\n                            this.origins[p.ID] = new _Point.Point(p.data());\n                            this.deletePointByID(p.ID);\n                        }\n                    } catch (err) {\n                        _didIteratorError14 = true;\n                        _iteratorError14 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                                _iterator14.return();\n                            }\n                        } finally {\n                            if (_didIteratorError14) {\n                                throw _iteratorError14;\n                            }\n                        }\n                    }\n                }\n                // Grabbed something\n                return true;\n            }\n            // Didn't grab anything\n            return false;\n        }\n    }, {\n        key: \"dragElement\",\n        value: function dragElement(pt) {\n            if (this.held instanceof _Point.Point) {\n                // Copy current location data to point\n                if (this.held.movex) {\n                    this.held.rawx = (0, _skyHelpers.constrain)(pt.rawx, this.graphinfo.padding.left, this.graphinfo.padding.left + this.graphinfo.graphwidth);\n                }\n                if (this.held.movey) {\n                    this.held.rawy = (0, _skyHelpers.constrain)(pt.rawy, this.graphinfo.padding.top, this.graphinfo.padding.top + this.graphinfo.graphheight);\n                }\n                // Calculated calibrated positions from new raw position\n                this.held.generateCalFromRaw();\n                // Show held point\n                this.draw(this.held);\n            } else if (this.held instanceof _Line.Line) {\n                // Update location data\n                var rawdx = pt.rawx - this.grabpoint.rawx;\n                var caldx = pt.x - this.grabpoint.x;\n                var rawdy = pt.rawy - this.grabpoint.rawy;\n                var caldy = pt.y - this.grabpoint.y;\n                var _iteratorNormalCompletion15 = true;\n                var _didIteratorError15 = false;\n                var _iteratorError15 = undefined;\n\n                try {\n                    for (var _iterator15 = this.held.points[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n                        var p = _step15.value;\n\n                        if (p.movex) {\n                            p.rawx = (0, _skyHelpers.constrain)(this.origins[p.ID].rawx + rawdx, this.graphinfo.padding.left, this.graphinfo.padding.left + this.graphinfo.graphwidth);\n                        }\n                        if (p.movey) {\n                            p.rawy = (0, _skyHelpers.constrain)(this.origins[p.ID].rawy + rawdy, this.graphinfo.padding.top, this.graphinfo.padding.top + this.graphinfo.graphheight);\n                        }\n                        p.generateCalFromRaw();\n                        // Show points\n                        if (p.show) {\n                            this.draw(p);\n                        }\n                    }\n                    // Show held line\n                } catch (err) {\n                    _didIteratorError15 = true;\n                    _iteratorError15 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                            _iterator15.return();\n                        }\n                    } finally {\n                        if (_didIteratorError15) {\n                            throw _iteratorError15;\n                        }\n                    }\n                }\n\n                this.draw(this.held);\n            }\n        }\n    }, {\n        key: \"dropElement\",\n        value: function dropElement(pt) {\n            if (this.held instanceof _Point.Point) {\n                // Copy current location data to point\n                if (this.held.movex) {\n                    this.held.rawx = (0, _skyHelpers.constrain)(pt.rawx, this.graphinfo.padding.left, this.graphinfo.padding.left + this.graphinfo.graphwidth);\n                }\n                if (this.held.movey) {\n                    this.held.rawy = (0, _skyHelpers.constrain)(pt.rawy, this.graphinfo.padding.top, this.graphinfo.padding.top + this.graphinfo.graphheight);\n                }\n                // Calculated calibrated positions from new raw position\n                this.held.generateCalFromRaw();\n                // Add point to finished list\n                this.finished.push(this.held);\n            } else if (this.held instanceof _Line.Line) {\n                var rawdx = pt.rawx - this.grabpoint.rawx;\n                var caldx = pt.x - this.grabpoint.x;\n                var rawdy = pt.rawy - this.grabpoint.rawy;\n                var caldy = pt.y - this.grabpoint.y;\n                var _iteratorNormalCompletion16 = true;\n                var _didIteratorError16 = false;\n                var _iteratorError16 = undefined;\n\n                try {\n                    for (var _iterator16 = this.held.points[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n                        var p = _step16.value;\n\n                        if (p.movex) {\n                            p.rawx = (0, _skyHelpers.constrain)(this.origins[p.ID].rawx + rawdx, this.graphinfo.padding.left, this.graphinfo.padding.left + this.graphinfo.graphwidth);\n                        }\n                        if (p.movey) {\n                            p.rawy = (0, _skyHelpers.constrain)(this.origins[p.ID].rawy + rawdy, this.graphinfo.padding.top, this.graphinfo.padding.top + this.graphinfo.graphheight);\n                        }\n                        p.generateCalFromRaw();\n                        // Show points\n                        if (p.show) {\n                            this.finished.push(p);\n                        }\n                    }\n                    // Add line to finished list\n                } catch (err) {\n                    _didIteratorError16 = true;\n                    _iteratorError16 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion16 && _iterator16.return) {\n                            _iterator16.return();\n                        }\n                    } finally {\n                        if (_didIteratorError16) {\n                            throw _iteratorError16;\n                        }\n                    }\n                }\n\n                this.finished.push(this.held);\n                this.origins = undefined;\n                this.grabpoint = undefined;\n            }\n            // Reset holding\n            this.held = undefined;\n        }\n        /**\n            Whenever the mouse is moved over the canvas, update the dynamic layer.\n        */\n\n    }, {\n        key: \"mouseMove\",\n        value: function mouseMove(e) {\n            // Get location of event\n\n            var pt = this.getMousePoint(e);\n            this.update();\n\n            // Draw cursor\n            if (this.cursor != undefined) {\n                var cursorpt = new _Point.Point(pt.data());\n                if (this.held) {\n                    if (this.held.altcursor) {\n                        this.drawCursor(cursorpt, this.held.altcursor);\n                    } else {\n                        this.drawCursor(cursorpt, this.cursor);\n                    }\n                } else {\n                    this.drawCursor(cursorpt, this.cursor);\n                }\n            }\n            // If moving objects\n            if (this.mode === \"move\") {\n                // Drag held object\n                if (this.held) {\n                    this.dragElement(pt);\n                }\n                // If drawing\n            } else if (this.drawing) {\n                if (this.mode === \"point\") {\n                    this.draw(pt);\n                } else if (this.mode === \"line\") {\n                    this.draw(new _Line.Line({ \"points\": [this.pt, pt] }));\n                } else if (this.mode === \"calibrate\") {\n                    this.draw(new _Line.Line({ \"points\": [this.pt, pt] }));\n                }\n            }\n        }\n        /**\n            Whenever the mouse is released over the canvas\n        */\n\n    }, {\n        key: \"mouseUp\",\n        value: function mouseUp(e) {\n            // Get location of event\n            var pt = this.getMousePoint(e);\n            if (this.mode === \"move\") {\n                if (this.held) {\n                    this.dropElement(pt);\n                }\n            } else if (this.mode === \"draw\") {\n                this.drawing = false;\n                if (this.mode === \"point\") {\n                    this.finished.push(pt);\n                } else if (this.mode === \"line\") {\n                    this.finished.push(new _Line.Line({ \"points\": [this.pt, pt] }));\n                } else if (this.mode === \"calibrate\") {\n                    // calibration routine\n                    this.finished.push(new _Line.Line({ \"points\": [this.pt, pt] }));\n                    var x1 = document.getElementById(this.x1).value;\n                    var y1 = document.getElementById(this.y1).value;\n                    var x2 = document.getElementById(this.x2).value;\n                    var y2 = document.getElementById(this.y2).value;\n                    var str = \"let calibration = new Line({\\\"points\\\":[new Point({\\\"rawx\\\":\" + this.pt.rawx + \", \\\"rawy\\\":\" + this.pt.rawy + \", \\\"x\\\":\" + x1 + \", \\\"y\\\":\" + y1 + \"})\";\n                    str += \", new Point({\\\"rawx\\\":\" + pt.rawx + \", \\\"rawy\\\":\" + pt.rawy + \", \\\"x\\\":\" + x2 + \", \\\"y\\\":\" + y2 + \"})]});\";\n                    console.log(\"Copy and paste the line between the bars to use this calibration:\");\n                    console.log(\"-----\");\n                    console.log(str);\n                    console.log(\"-----\");\n                }\n            }\n        }\n        /**\n            Whenever the mouse is clicked on the canvas object\n        */\n\n    }, {\n        key: \"mouseDown\",\n        value: function mouseDown(e) {\n            // Get location of event\n            var pt = this.getMousePoint(e);\n            if (this.mode == \"move\") {\n                // Check if an element was grabbed\n                if (this.grabElement(pt)) {\n                    this.update();\n                    this.draw(this.held);\n                }\n            } else if (this.mode == \"draw\") {\n                this.pt1 = pt;\n                this.drawing = true;\n            }\n        }\n        /**\n            Handle key-press events<br>\n            Must be forwarded from {@link ProblemController}\n        */\n\n    }, {\n        key: \"keyPress\",\n        value: function keyPress(key) {\n            this.drawing = false;\n            this.calibrating = false;\n            if (key === \"p\") {\n                this.mode = \"point\";\n            } else if (key === \"l\") {\n                this.mode = \"line\";\n            }\n            this.update();\n        }\n    }]);\n\n    return GraphCanvasController;\n}();\n\n//# sourceURL=webpack:///./src/GraphCanvasController.js?");

/***/ }),

/***/ "./src/GraphInfo.js":
/*!**************************!*\
  !*** ./src/GraphInfo.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n    Container class for graph/calibration data\r\n    @param {object} args Object of input arguments.\r\n    @param {int} args.graphheight Height (in px) of the vertical (y) axes\r\n    @param {int} args.graphwidth Width (in px) of the horizontal (x) axes\r\n    @param {string} args.graphbackground Color of the area within the axes\r\n    @param {string} args.axesbackground Color of the area around the graph\r\n    @param {object} args.padding Container for padding size around the plot\r\n        @param {int} args.padding.top Height (in px) of the region above the plot\r\n        @param {int} args.padding.left Width (in px) of the region to the left of the plot\r\n        @param {int} args.padding.bottom Height (in px) of the region below the plot\r\n        @param {int} args.padding.right Width (in px) of the region to the right of the plot\r\n    @param {object} args.x Container for information about the primary x axis\r\n        @param {string} args.x.label Text to label the axis\r\n        @param {float} args.x.min Left/bottom value on the axis\r\n        @param {float} args.x.max Right/top value on the axis\r\n        @param {float} args.x.majortick Increment to draw major tick marks on the axis\r\n        @param {float} args.x.minortick Increment to draw minor tick marks on the axis\r\n        @param {float} args.x.gridline Increent to draw gridlines across the plot\r\n    @param {object} args.y Container for information about the primary y axis (same arguments as {@link x})\r\n    @param {object} args.x2 Container for information about the secondary x axis (same arguments as {@link x})\r\n    @param {object} args.y2 Container for information about the secondary y axis (same arguments as {@link x})\r\n*/\nvar GraphInfo = exports.GraphInfo = function () {\n    function GraphInfo(args) {\n        _classCallCheck(this, GraphInfo);\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = Object.keys(args)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var key = _step.value;\n\n                this[key] = args[key];\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        this.height = this.graphheight + this.padding.bottom + this.padding.top;\n        this.width = this.graphwidth + this.padding.left + this.padding.right;\n        this.graphleft = this.padding.left;\n        this.graphright = this.padding.left + this.graphwidth;\n        this.graphtop = this.padding.top;\n        this.graphbottom = this.padding.top + this.graphheight;\n\n        // Generate calibration values/functions\n        if (this.x != undefined) {\n            this.setupAxis(this.x, this.padding.left, this.graphwidth, this.x.min, this.x.max);\n        }\n        if (this.y != undefined) {\n            this.setupAxis(this.y, this.padding.top, this.graphheight, this.y.max, this.y.min);\n        }\n        if (this.x2 != undefined) {\n            this.setupAxis(this.x2, this.padding.left, this.graphwidth, this.x2.min, this.x2.max);\n        }\n        if (this.y2 != undefined) {\n            this.setupAxis(this.y2, this.padding.top, this.graphheight, this.y2.max, this.y2.min);\n        }\n    }\n    /**\r\n    * TODO\r\n    */\n\n\n    _createClass(GraphInfo, [{\n        key: \"setupAxis\",\n        value: function setupAxis(axis, padding, graphsize, axismin, axismax) {\n            axis.scale = graphsize / (axismax - axismin);\n            axis.CalToRaw = function (cal) {\n                return (cal - axismin) * axis.scale + padding;\n            };\n            axis.RawToCal = function (raw) {\n                return (raw - padding) / axis.scale + axismin;\n            };\n        }\n    }]);\n\n    return GraphInfo;\n}();\n\n//# sourceURL=webpack:///./src/GraphInfo.js?");

/***/ }),

/***/ "./src/Line.js":
/*!*********************!*\
  !*** ./src/Line.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Line = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Text = __webpack_require__(/*! ./Text.js */ \"./src/Text.js\");\n\nvar _skyHelpers = __webpack_require__(/*! ./sky-helpers.js */ \"./src/sky-helpers.js\");\n\nvar _GraphCanvasController = __webpack_require__(/*! ./GraphCanvasController.js */ \"./src/GraphCanvasController.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IDLENGTH = 16;\n\n/**\r\n    @param {object} args Object-like object of input arguments.\r\n    @param {list} args.points List of {@link Point} constructor argument objects\r\n    @param {string} [args.color=\"black\"]\r\n    @param {float} [args.width=1]\r\n    @param {boolean} [args.answer=false]\r\n    @param {boolean} [args.correctanswer=false]\r\n    @param {object} [args.fill] Fill the region enclosed by the line\r\n    @param {string} args.fill.color Color to fill the region\r\n    @param {float} args.fill.opacity Opacity of the color (0 to 1)\r\n    @param {object} [args.label] Label to go beside the line\r\n    @param {string} [args.label.text] Label contents\r\n    @param {number} [args.label.independent] Location of text (of independent variable)\r\n    @param {number} [args.label.dependent] Location of text (of dependent variable)\r\n*/\n\nvar Line = exports.Line = function () {\n    function Line(args) {\n        _classCallCheck(this, Line);\n\n        /**\r\n            @name Line#ID\r\n            @type string\r\n            @desc (Probably) unique identifier for line. Generated by {@link randomID}.\r\n        */\n        this.ID = (0, _skyHelpers.randomID)(IDLENGTH);\n        /**\r\n            @name Line#color\r\n            @type string\r\n            @default \"black\"\r\n            @desc Line color.\r\n        */\n        this.color = \"black\";\n        /**\r\n            @name Line#width\r\n            @type number\r\n            @default 2\r\n            @desc Line width.\r\n        */\n        this.width = 2;\n        /**\r\n            @name Line#tension\r\n            @type number\r\n            @default 0\r\n            @desc Tension of spline drawn through points (0 is linear)\r\n        */\n        this.tension = 0;\n        /**\r\n            @name Line#layer\n            @type number\n            @default 1\n            @desc Layer to draw element onto\n        */\n        this.layer = _GraphCanvasController.LAYERS.UNDER;\n        /**\n            @name Line#answer\r\n            @type boolean\r\n            @default false\r\n            @desc Is this line submitted as an answer to the question?\r\n        */\n        this.answer = false;\n        /**\r\n            @name Line#correctanswer\r\n            @type boolean\r\n            @default false\r\n            @desc Is this line a correct answer?\r\n        */\n        this.correctanswer = false;\n        // Fill values from provided arguments\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = Object.keys(args)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var key = _step.value;\n\n                this[key] = args[key];\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n\n    _createClass(Line, [{\n        key: \"draw\",\n        value: function draw(context) {\n            context.save();\n            context.beginPath();\n            context.globalAlpha = 1;\n            context.strokeStyle = this.color;\n            context.lineWidth = this.width;\n            if (this.dashes) {\n                context.setLineDash([this.dashes.dash, this.dashes.space]);\n            }\n            var first = true;\n            // Connect points\n            if (this.tension == 0) {\n                // Draw point-to-point\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = this.points[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var pt = _step2.value;\n\n                        if ((0, _skyHelpers.isBetween)(pt.rawx, this.graphinfo.graphleft, this.graphinfo.graphright) && (0, _skyHelpers.isBetween)(pt.rawy, this.graphinfo.graphtop, this.graphinfo.graphbottom)) {\n                            if (first) {\n                                // Move to start of line\n                                context.moveTo(pt.rawx, pt.rawy);\n                            } else {\n                                // Draw segment\n                                context.lineTo(pt.rawx, pt.rawy);\n                                context.stroke();\n                            }\n                            first = false;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n            } else {\n                this.drawSpline(context, this.tension);\n            }\n            // Shade tolerance of points\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this.points[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var _pt = _step3.value;\n\n                    if (this.correctanswer && _pt.answer) {\n                        // Draw ellipse\n                        context.beginPath();\n                        context.strokeStyle = \"green\";\n                        context.ellipse(_pt.rawx, _pt.rawy, this.tolerance.x * _pt.graphinfo.x.scale, this.tolerance.y * -_pt.graphinfo.y.scale, 0, 0, 2 * Math.PI, false);\n                        //context.stroke();\n                        // Fill circle\n                        context.fillStyle = \"green\";\n                        context.globalAlpha = 0.3;\n                        context.fill();\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            if (this.fill) {\n                context.fillStyle = this.fill.color;\n                context.globalAlpha = this.fill.opacity;\n                context.fill();\n            }\n            if (this.label) {\n                var pos = { \"graphinfo\": this.graphinfo };\n                pos[this.independent.symbol] = this.label.independent;\n                pos[this.dependent.symbol] = this.label.dependent;\n                new _Text.Text({\n                    \"text\": this.label.text,\n                    \"position\": pos,\n                    \"align\": \"center\",\n                    \"color\": this.color,\n                    \"rotate\": this.label.rotate\n                }).draw(context);\n            }\n            context.restore();\n        }\n        /**\r\n        *   Generates control points for use in {@link Line#drawSpline}\r\n        */\n\n    }, {\n        key: \"getControlPoints\",\n        value: function getControlPoints(x0, y0, x1, y1, x2, y2, t) {\n            //  x0,y0,x1,y1 are the coordinates of the end (knot) pts of this segment\n            //  x2,y2 is the next knot -- not connected here but needed to calculate p2\n            //  p1 is the control point calculated here, from x1 back toward x0.\n            //  p2 is the next control point, calculated here and returned to become the\n            //  next segment's p1.\n            //  t is the 'tension' which controls how far the control points spread.\n\n            //  Scaling factors: distances from this knot to the previous and following knots.\n            var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2));\n            var d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n\n            var fa = t * d01 / (d01 + d12);\n            var fb = t - fa;\n\n            var p1x = x1 + fa * (x0 - x2);\n            var p1y = y1 + fa * (y0 - y2);\n\n            var p2x = x1 - fb * (x0 - x2);\n            var p2y = y1 - fb * (y0 - y2);\n\n            return [p1x, p1y, p2x, p2y];\n        }\n        /**\r\n        *   Draws a spline with specified tension <br>\r\n        *   Using example at: http://scaledinnovation.com/analytics/splines/aboutSplines.html\r\n        *   @param {context} context Canvas context to draw onto\r\n        *   @param {float} t Tension to draw the spline with\r\n        */\n\n    }, {\n        key: \"drawSpline\",\n        value: function drawSpline(context, t) {\n            var pts = [];\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = this.points[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var pt = _step4.value;\n\n                    pts.push(pt.rawx);\n                    pts.push(pt.rawy);\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n\n            var cp = [];\n            var n = pts.length;\n            for (var _i = 0; _i < n - 4; _i += 2) {\n                cp = cp.concat(this.getControlPoints(pts[_i], pts[_i + 1], pts[_i + 2], pts[_i + 3], pts[_i + 4], pts[_i + 5], t));\n            }\n            for (var i = 2; i < pts.length - 5; i += 2) {\n                //            if (isBetween(pts[i], this.graphinfo.graphleft, this.graphinfo.graphright) &&\n                //                isBetween(pts[i+1], this.graphinfo.graphtop, this.graphinfo.graphbottom) &&\n                //                isBetween(pts[i+2], this.graphinfo.graphleft, this.graphinfo.graphright) &&\n                //                isBetween(pts[i+3], this.graphinfo.graphtop, this.graphinfo.graphbottom)) {\n                context.beginPath();\n                context.moveTo(pts[i], pts[i + 1]);\n                context.bezierCurveTo(cp[2 * i - 2], cp[2 * i - 1], cp[2 * i], cp[2 * i + 1], pts[i + 2], pts[i + 3]);\n                context.stroke();\n                context.closePath();\n                //            }\n            }\n            //  For open curves the first and last arcs are simple quadratics.\n            //        if (isBetween(pts[0], this.graphinfo.graphleft, this.graphinfo.graphright) &&\n            //            isBetween(pts[1], this.graphinfo.graphtop, this.graphinfo.graphbottom)) {\n            context.beginPath();\n            context.moveTo(pts[0], pts[1]);\n            context.quadraticCurveTo(cp[0], cp[1], pts[2], pts[3]);\n            context.stroke();\n            context.closePath();\n            //        }\n            //        if (isBetween(pts[n-4], this.graphinfo.graphleft, this.graphinfo.graphright) &&\n            //            isBetween(pts[n-3], this.graphinfo.graphtop, this.graphinfo.graphbottom)) {\n            context.beginPath();\n            context.moveTo(pts[n - 2], pts[n - 1]);\n            context.quadraticCurveTo(cp[2 * n - 10], cp[2 * n - 9], pts[n - 4], pts[n - 3]);\n            context.stroke();\n            context.closePath();\n            //        }\n        }\n        /**\r\n            @return {int} The number of line segments\r\n        */\n\n    }, {\n        key: \"segments\",\n        value: function segments() {\n            return this.points.length - 1;\n        }\n        /**\r\n            @return {float} The total distance covered by the line from point to point\r\n        */\n\n    }, {\n        key: \"distance\",\n        value: function distance() {\n            var sum = 0;\n            for (var i = 1; i < this.points.length; i++) {\n                sum += (0, _skyHelpers.getDist)(this.points[i - 1], this.points[i]);\n            }\n            return sum;\n        }\n        /**\r\n            @return {object} The internal data of the line\r\n        */\n\n    }, {\n        key: \"data\",\n        value: function data() {\n            var r = {};\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n                for (var _iterator5 = Object.keys(this)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var k = _step5.value;\n\n                    r[k] = this[k];\n                }\n            } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                        _iterator5.return();\n                    }\n                } finally {\n                    if (_didIteratorError5) {\n                        throw _iteratorError5;\n                    }\n                }\n            }\n\n            return r;\n        }\n    }]);\n\n    return Line;\n}();\n\n//# sourceURL=webpack:///./src/Line.js?");

/***/ }),

/***/ "./src/Modal.js":
/*!**********************!*\
  !*** ./src/Modal.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n*\n*/\nvar Modal = exports.Modal = function () {\n    /**\n    *\n    */\n    function Modal(args) {\n        var _this = this;\n\n        _classCallCheck(this, Modal);\n\n        // Pull in arguments\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = Object.keys(args)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var key = _step.value;\n\n                this[key] = args[key];\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        if (!document.getElementById(this.modalid)) {\n            // Insert modal onto page\n            document.body.insertAdjacentHTML(\"beforeend\", this.getHTML());\n        }\n        // Retrieve html element\n        this.modal = document.getElementById(this.modalid);\n        // Set up listener for 'x' box\n        this.modal.getElementsByClassName(\"close\")[0].onclick = function (e) {\n            return _this.hide();\n        };\n        // Close if clicking outside the box\n        document.addEventListener(\"click\", function (e) {\n            return _this.checkhide(e);\n        });\n    }\n\n    /**\n    *\n    */\n\n\n    _createClass(Modal, [{\n        key: \"getHTML\",\n        value: function getHTML() {\n            var html = \"<div id=\\\"\" + this.modalid + \"\\\" class=\\\"\" + this.modalclass + \"\\\">\";\n            html += \"<div class=\\\"modal-content\\\">\";\n            html += \"<div class=\\\"modal-header\\\" style=\\\"background-color:\" + this.backgroundcolor + \"\\\">\";\n            html += \"<span class=\\\"close\\\"> &times; </span>\";\n            html += \"<p>\" + this.header + \"</p>\";\n            html += \"</div>\";\n            html += \"<div class=\\\"modal-body\\\">\";\n            html += \"<p>\" + this.content + \"</p>\";\n            html += \"</div>\";\n            html += \"</div>\";\n            html += \"</div>\";\n            return html;\n        }\n\n        /**\n        * If clicking outside the modal box, hide it\n        */\n\n    }, {\n        key: \"checkhide\",\n        value: function checkhide(e) {\n            if (e.target == this.modal) {\n                this.hide();\n            }\n        }\n\n        /**\n        *\n        */\n\n    }, {\n        key: \"show\",\n        value: function show() {\n            this.modal.style.display = \"block\";\n            this.showing = true;\n        }\n\n        /**\n        *\n        */\n\n    }, {\n        key: \"hide\",\n        value: function hide() {\n            this.modal.style.display = \"none\";\n            this.showing = false;\n        }\n\n        /**\n        *\n        */\n\n    }, {\n        key: \"remove\",\n        value: function remove() {\n            this.modal.remove();\n            delete this;\n        }\n    }]);\n\n    return Modal;\n}();\n\n//# sourceURL=webpack:///./src/Modal.js?");

/***/ }),

/***/ "./src/Point.js":
/*!**********************!*\
  !*** ./src/Point.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Point = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _skyHelpers = __webpack_require__(/*! ./sky-helpers.js */ \"./src/sky-helpers.js\");\n\nvar _Text = __webpack_require__(/*! ./Text.js */ \"./src/Text.js\");\n\nvar _GraphCanvasController = __webpack_require__(/*! ./GraphCanvasController.js */ \"./src/GraphCanvasController.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IDLENGTH = 16;\n\n// ##### Canvas objects #####\n\n/**\r\n    Objecting representing a point in 2D space\r\n*/\n\nvar Point = exports.Point = function () {\n    /**\r\n        @param {object} args Object of input arguments.\r\n        @param {object} args.graphinfo\r\n        @param {float} args.rawx\r\n        @param {float} args.rawy\r\n        @param {float} args.x\r\n        @param {float} args.y\r\n        @param {boolean} [args.movex=false]\r\n        @param {boolean} [args.movey=false]\r\n        @param {string} [args.color=\"black\"]\r\n        @param {float} [args.radius=5]\r\n        @param {Point} [args.label]\r\n        @param {Point} args.label.text\r\n        @param {Point} [args.label.offset]\r\n        @param {boolean} [args.answer=false]\r\n        @param {boolean} [args.show=true]\r\n    */\n    function Point(args) {\n        _classCallCheck(this, Point);\n\n        /**\r\n            @name Point#graphinfo\r\n            @type GraphInfo\r\n            @desc Relevant information for the graph this point will live on.\r\n        */\n        /**\r\n            @name Point#x\r\n            @type float\r\n            @desc Calibrated x value of point. Must provide either this or {@link Point#rawx}.\r\n        */\n        /**\r\n            @name Point#y\r\n            @type float\r\n            @desc Calibrated y value of point. Must provide either this or {@link Point#rawy}.\r\n        */\n        /**\r\n            @name Point#rawx\r\n            @type float\r\n            @desc Canvas-based x value of point. Must provide either this or {@link Point#x}.\r\n        */\n        /**\r\n            @name Point#rawy\r\n            @type float\r\n            @desc Canvas-based y value of point. Must provide either this or {@link Point#y}.\r\n        */\n        /**\r\n            @name Point#ID\r\n            @type string\r\n            @desc (Probably) unique identifier for point. Generated by {@link randomID}.\r\n        */\n        this.ID = (0, _skyHelpers.randomID)(IDLENGTH);\n        /**\r\n            @name Point#movex\r\n            @type boolean\r\n            @desc Is this point movable in the x dimension?\r\n            @default false\r\n        */\n        this.movex = false;\n        /**\r\n            @name Point#movey\r\n            @type boolean\r\n            @desc Is this point movable in the y dimension?\r\n            @default false\r\n        */\n        this.movey = false;\n        /**\r\n            @name Point#color\r\n            @type string\r\n            @default \"black\"\r\n            @desc Color of the point\r\n        */\n        this.color = \"black\";\n        /**\r\n            @name Point#radius\r\n            @type float\r\n            @default 5\r\n            @desc Radius of the point\r\n        */\n        this.radius = 5;\n        /**\r\n            @name Point#layer\n            @type number\n            @default 3\n            @desc Layer to draw element onto\n        */\n        this.layer = _GraphCanvasController.LAYERS.OVER;\n        /**\n            @name Point#answer\r\n            @type boolean\r\n            @default false\r\n            @desc Is this point submitted as an answer to the question?\r\n        */\n        this.answer = false;\n        /**\r\n            @name Point#show\r\n            @type boolean\r\n            @default true\r\n            @desc Is this point drawn as part of a line?\r\n        */\n        this.show = true;\n        // Fill values from provided arguments\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = Object.keys(args)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var key = _step.value;\n\n                this[key] = args[key];\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        this.generateMissing();\n        if (this.label) {\n            // Create default offset\n            this.label.offset = this.label.offset ? this.label.offset : { \"rawx\": 0, \"rawy\": 0 };\n            // Add offset to point position\n            this.label.position = { \"rawx\": this.rawx + this.label.offset.rawx, \"rawy\": this.rawy + this.label.offset.rawy };\n            // If still raw data, create text element\n            if (!(this.label instanceof _Text.Text)) {\n                this.label.graphinfo = this.graphinfo;\n                this.label = new _Text.Text(this.label);\n            }\n        }\n    }\n\n    _createClass(Point, [{\n        key: \"draw\",\n        value: function draw(context) {\n            if ((0, _skyHelpers.isBetween)(this.rawx, this.graphinfo.graphleft, this.graphinfo.graphright) && (0, _skyHelpers.isBetween)(this.rawy, this.graphinfo.graphtop, this.graphinfo.graphbottom)) {\n                if (this.show) {\n                    context.save();\n                    if (this.correctanswer) {\n                        // Draw ellipse\n                        context.beginPath();\n                        context.strokeStyle = \"green\";\n                        context.ellipse(this.rawx, this.rawy, this.tolerance.x * this.graphinfo.x.scale, this.tolerance.y * -this.graphinfo.y.scale, 0, 0, 2 * Math.PI, false);\n                        context.stroke();\n                        // Fill circle\n                        context.fillStyle = \"green\";\n                        context.globalAlpha = 0.3;\n                        context.fill();\n                    }\n                    // Black border\n                    context.beginPath();\n                    context.fillStyle = \"black\";\n                    context.globalAlpha = 1;\n                    context.arc(this.rawx, this.rawy, this.radius, 2 * Math.PI, false);\n                    context.fill();\n                    // Colored interior\n                    context.beginPath();\n                    context.fillStyle = this.color;\n                    context.arc(this.rawx, this.rawy, this.radius - 1, 2 * Math.PI, false);\n                    context.fill();\n                    context.restore();\n                }\n                if (this.label != undefined) {\n                    this.label.draw(context);\n                }\n            }\n        }\n        /**\r\n            Sets raw values ({@link Point#rawx}, {@link Point#rawy}) from calibrated values ({@link Point#x}, {@link Point#y}) using {@link Point#graphinfo}.\r\n        */\n\n    }, {\n        key: \"generateMissing\",\n        value: function generateMissing() {\n            if (this.graphinfo === undefined) {\n                console.log(\"Error in Point.generateMissing(), graphinfo not supplied.\", this);\n                return 0;\n            }\n            if (this.graphinfo.x != undefined) {\n                if (this.x === undefined) {\n                    this.x = this.graphinfo.x.RawToCal(this.rawx);\n                } else if (this.rawx === undefined) {\n                    this.rawx = this.graphinfo.x.CalToRaw(this.x);\n                }\n            }\n            if (this.graphinfo.x2 != undefined) {\n                if (this.x2 === undefined) {\n                    this.x2 = this.graphinfo.x2.RawToCal(this.rawx);\n                } else if (this.rawx === undefined) {\n                    this.rawx = this.graphinfo.x2.CalToRaw(this.x2);\n                }\n            }\n            if (this.graphinfo.y != undefined) {\n                if (this.y === undefined) {\n                    this.y = this.graphinfo.y.RawToCal(this.rawy);\n                } else if (this.rawy === undefined) {\n                    this.rawy = this.graphinfo.y.CalToRaw(this.y);\n                }\n            }\n            if (this.graphinfo.y2 != undefined) {\n                if (this.y2 === undefined) {\n                    this.y2 = this.graphinfo.y2.RawToCal(this.rawy);\n                } else if (this.rawy === undefined) {\n                    this.rawy = this.graphinfo.y2.CalToRaw(this.y2);\n                }\n            }\n        }\n    }, {\n        key: \"generateRawFromCal\",\n        value: function generateRawFromCal() {\n            if (this.graphinfo === undefined) {\n                console.log(\"Error in Point.generateMissing(), graphinfo not supplied.\", this);\n                return 0;\n            }\n            if (this.graphinfo.x != undefined) {\n                this.rawx = this.graphinfo.x.CalToRaw(this.x);\n            }\n            if (this.graphinfo.x2 != undefined) {\n                this.rawx = this.graphinfo.x2.CalToRaw(this.x2);\n            }\n            if (this.graphinfo.y != undefined) {\n                this.rawy = this.graphinfo.y.CalToRaw(this.y);\n            }\n            if (this.graphinfo.y2 != undefined) {\n                this.rawy = this.graphinfo.y2.CalToRaw(this.y2);\n            }\n        }\n    }, {\n        key: \"generateCalFromRaw\",\n        value: function generateCalFromRaw() {\n            if (this.graphinfo === undefined) {\n                console.log(\"Error in Point.generateMissing(), graphinfo not supplied.\", this);\n                return 0;\n            }\n            if (this.graphinfo.x != undefined) {\n                this.x = this.graphinfo.x.RawToCal(this.rawx);\n            }\n            if (this.graphinfo.x2 != undefined) {\n                this.x2 = this.graphinfo.x2.RawToCal(this.rawx);\n            }\n            if (this.graphinfo.y != undefined) {\n                this.y = this.graphinfo.y.RawToCal(this.rawy);\n            }\n            if (this.graphinfo.y2 != undefined) {\n                this.y2 = this.graphinfo.y2.RawToCal(this.rawy);\n            }\n        }\n        /**\r\n            @return {object} The internal data of the point\r\n        */\n\n    }, {\n        key: \"data\",\n        value: function data() {\n            var r = {};\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = Object.keys(this)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var k = _step2.value;\n\n                    r[k] = this[k];\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            return r;\n        }\n    }]);\n\n    return Point;\n}();\n\n//# sourceURL=webpack:///./src/Point.js?");

/***/ }),

/***/ "./src/ProblemController.js":
/*!**********************************!*\
  !*** ./src/ProblemController.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ProblemController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _DOM = __webpack_require__(/*! ./DOM.js */ \"./src/DOM.js\");\n\nvar _Question = __webpack_require__(/*! ./Question.js */ \"./src/Question.js\");\n\nvar _Modal = __webpack_require__(/*! ./Modal.js */ \"./src/Modal.js\");\n\nvar _skyHelpers = __webpack_require__(/*! ./sky-helpers.js */ \"./src/sky-helpers.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VAR = \"@\";\nvar HIDESCOREWINDOWWIDTH = 875;\nvar gradecatcherURL = \"https://script.google.com/macros/s/AKfycbzNPmE7Qx1mLXdwIvP8FyWVyDdR8FQ-ymkAFyiNcF4QC4zvVwM/exec\";\nvar feedbackcatcherURL = \"https://script.google.com/macros/s/AKfycbyKAKkuvF87WdWUvhHbhbXvjqz3d0qBST7eJIzOTPkNhw9qKuOg/exec\";\n\n/**\r\n    Master class for controlling page <br>\r\n    Each problem consists of a series of {@link Question}s\r\n*/\n\nvar ProblemController = exports.ProblemController = function () {\n    /**\r\n        @param {object} inputarguments\r\n        @param {string} inputarguments.title Title to be displayed at the top of the page and as the html page title\r\n        @param {object} inputarguments.inputvariables Data for variables used in problem\r\n        @param {list} inputarguments.questions List of objects containing data for each {@link Question}\r\n        @param {object} inputarguments.finish Object containing data for display of finishing page\r\n    */\n    function ProblemController(inputarguments, containerid) {\n        var _this = this;\n\n        _classCallCheck(this, ProblemController);\n\n        this.inputarguments = inputarguments;\n        this.containerid = containerid;\n        this.init(this.inputarguments, this.containerid);\n\n        // Catch keyboard events\n        document.addEventListener(\"keydown\", function (e) {\n            return _this.keyEvent(e);\n        });\n    }\n\n    _createClass(ProblemController, [{\n        key: \"init\",\n        value: function init(inputarguments, containerid) {\n            // Insert main page containers\n            var html = \"<div id=\" + _DOM.DOM.problemdivid + \">\";\n            html += \"<div id=\\\"\" + _DOM.DOM.titledivid + \"\\\"></div>\";\n            html += \"<hr>\";\n            html += \"<div id=\\\"\" + _DOM.DOM.questiondivid + \"\\\"></div>\";\n            html += \"<hr>\";\n            html += \"<div id=\\\"\" + _DOM.DOM.buttonsdivid + \"\\\"></div>\";\n            html += \"<div id=\\\"\" + _DOM.DOM.scoredivid + \"\\\" class=\\\"\" + _DOM.DOM.hiddenclass + \"\\\"></div>\";\n            html += \"<div id=\\\"\" + _DOM.DOM.gradedivid + \"\\\"></div>\";\n            html += \"<div id=\" + _DOM.DOM.modaldivid + \"></div>\";\n            html += \"</div>\";\n            document.getElementById(containerid).insertAdjacentHTML(\"beforeend\", html);\n\n            // Set up score box\n            if (document.documentElement.clientWidth < HIDESCOREWINDOWWIDTH) {\n                document.getElementById(_DOM.DOM.scoredivid).classList.add(_DOM.DOM.hidescoreclass);\n            } else {\n                document.getElementById(_DOM.DOM.scoredivid).classList.remove(_DOM.DOM.hidescoreclass);\n            }\n            document.getElementsByTagName(\"BODY\")[0].onresize = function () {\n                if (document.documentElement.clientWidth < HIDESCOREWINDOWWIDTH) {\n                    document.getElementById(_DOM.DOM.scoredivid).classList.add(_DOM.DOM.hidescoreclass);\n                } else {\n                    document.getElementById(_DOM.DOM.scoredivid).classList.remove(_DOM.DOM.hidescoreclass);\n                }\n            };\n\n            // Create begin button\n            this.insertButton(_DOM.DOM.buttonsdivid, _DOM.DOM.beginbuttonid, \"Begin\", this.begin.bind(this));\n\n            // Set problem title\n            this.title = inputarguments.pagetitle;\n            document.title = this.title;\n            document.getElementById(_DOM.DOM.titledivid).insertAdjacentHTML(\"beforeend\", this.title);\n\n            // Create questions\n            this.questions = [];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = inputarguments.questions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var q = _step.value;\n\n                    this.questions.push(new _Question.Question(q));\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            this.finishquestion = new _Question.Question(inputarguments.finish);\n            this.beginquestion = new _Question.Question(inputarguments.begin);\n\n            // Create variables\n            this.variablevalues = (0, _skyHelpers.generateVariables)(inputarguments.variables);\n\n            // Initialize variables\n            this.reviewing = false;\n            this.hasbegun = false;\n            this.finished = false;\n            this.currentquestion = undefined;\n            this.score = {};\n            for (var i in this.questions) {\n                this.score[i] = { \"max\": this.questions[i].totalPoints,\n                    \"got\": 0,\n                    \"pct\": 0 };\n            }\n\n            // Create modals\n            this.restartmodal = new _Modal.Modal({\n                parentid: _DOM.DOM.modaldivid,\n                modalid: _DOM.DOM.restartmodal,\n                modalclass: _DOM.DOM.modalclass,\n                header: \"Restart Problem\",\n                backgroundcolor: \"#BC5F50\",\n                content: \"You will lose all progress on the current problem. <br><br>Really start a new problem?<br><br><button id=\\\"\" + _DOM.DOM.restartoneid + \"\\\">Restart from step one</button><button id=\\\"\" + _DOM.DOM.restartzeroid + \"\\\">Restart from introduction</button><button id=\\\"\" + _DOM.DOM.restartabortid + \"\\\">No</button>\"\n            });\n            this.grademodal = new _Modal.Modal({\n                parentid: _DOM.DOM.modaldivid,\n                modalid: _DOM.DOM.gradesubmitmodal,\n                modalclass: _DOM.DOM.modalclass,\n                header: \"Submit Grade\",\n                backgroundcolor: \"#123456\",\n                content: function () {\n                    var grademodalhtml = \"<form id=\\\"\" + _DOM.DOM.gradeformid + \"\\\" method=\\\"POST\\\" class=\\\"pure-form pure-form-stacked\\\" data-email=\\\"SOMEEMAIL@email.net\\\"\\n          action=\\\"\" + gradecatcherURL + \"\\\">\";\n                    grademodalhtml += \"<div class=\\\"\" + _DOM.DOM.textboxdivclass + \"\\\"><span class=\\\"\" + _DOM.DOM.textboxspanclass + \"\\\">Name:</span><br><input class=\\\"\" + _DOM.DOM.textboxclass + \"\\\" id=\\\"\" + _DOM.DOM.gradenametextid + \"\\\" required></input></div>\";\n                    grademodalhtml += \"<div class=\\\"\" + _DOM.DOM.textboxdivclass + \"\\\"><span class=\\\"\" + _DOM.DOM.textboxspanclass + \"\\\">Student ID:</span><br><input class=\\\"\" + _DOM.DOM.textboxclass + \"\\\" id=\\\"\" + _DOM.DOM.gradecuidtextid + \"\\\" required></input></div>\";\n                    grademodalhtml += \"<div class=\\\"\" + _DOM.DOM.textboxdivclass + \"\\\"><span class=\\\"\" + _DOM.DOM.textboxspanclass + \"\\\">Course code:</span><br><input class=\\\"\" + _DOM.DOM.textboxclass + \"\\\" id=\\\"\" + _DOM.DOM.gradecoursetextid + \"\\\" required></input></div>\";\n                    grademodalhtml += \"<button id=\\\"\" + _DOM.DOM.submitgradebuttonid + \"\\\">Submit</button>\";\n                    grademodalhtml += \"<p id=\" + _DOM.DOM.gradeservererrorid + \" class=\\\"hidden error\\\">Error while submitting grade to server. Check console for detailed http report.</p>\";\n                    grademodalhtml += \"</form>\";\n                    return grademodalhtml;\n                }()\n            });\n            this.createFeedbackInput();\n\n            // Show pre-question page\n            this.beginquestion.display(this.variablevalues);\n        }\n\n        /**\r\n        *   Restart the problem\r\n        */\n\n    }, {\n        key: \"promptrestart\",\n        value: function promptrestart() {\n            this.restartmodal.show();\n\n            document.getElementById(_DOM.DOM.restartzeroid).addEventListener(\"click\", this.restart.bind(this));\n            document.getElementById(_DOM.DOM.restartoneid).addEventListener(\"click\", this.restartstepone.bind(this));\n            document.getElementById(_DOM.DOM.restartabortid).addEventListener(\"click\", this.restartmodal.remove.bind(this.restartmodal));\n        }\n\n        /**\r\n        *\r\n        */\n\n    }, {\n        key: \"restartstepone\",\n        value: function restartstepone() {\n            this.restart();\n            this.begin();\n        }\n\n        /**\r\n        *\r\n        */\n\n    }, {\n        key: \"restart\",\n        value: function restart() {\n            // Hide modal\n            document.getElementById(_DOM.DOM.restartmodal).remove();\n            // Clear container\n            var me = document.getElementById(_DOM.DOM.problemdivid);\n            me.parentNode.removeChild(me);\n            // Start new problem\n            this.init(this.inputarguments, this.containerid);\n        }\n\n        /**\n        *\n        */\n\n    }, {\n        key: \"defocus\",\n        value: function defocus() {\n            // Give the document focus\n            window.focus();\n\n            // Remove focus from any focused element\n            if (document.activeElement) {\n                document.activeElement.blur();\n            }\n        }\n\n        /**\r\n            Handler for keypress events\r\n        */\n\n    }, {\n        key: \"keyEvent\",\n        value: function keyEvent(e) {\n            // Process keypress\n            switch (e.key) {\n                case \"Enter\":\n                    // If not in a modal\n                    if (!this.feedbackmodal.showing && !this.grademodal.showing) {\n                        // Ignore activating whatever is selected\n                        e.preventDefault();\n                        // Progress through the problem\n                        if (!this.hasbegun) {\n                            this.begin();\n                        } else if (!this.finished && !this.reviewing) {\n                            this.submit();\n                        } else if (!this.finished && this.reviewing) {\n                            this.next();\n                        }\n                    }\n                    break;\n                case \"F2\":\n                    if (this.hasbegun) {\n                        this.togglescore();\n                    }\n                    break;\n            }\n        }\n\n        /**\r\n            Removes all html elements from the question div, clearing the page for the next question\r\n        */\n\n    }, {\n        key: \"clearPage\",\n        value: function clearPage() {\n            // Clear question objects from html\n            var container = document.getElementById(_DOM.DOM.questiondivid);\n            while (container.hasChildNodes()) {\n                container.firstChild.remove();\n            }\n        }\n        /**\r\n            Inserts the HTML for grading submission input\r\n        */\n\n    }, {\n        key: \"insertScoreInput\",\n        value: function insertScoreInput() {\n            var _this2 = this;\n\n            // Create submission button\n            this.insertButton(_DOM.DOM.buttonsdivid, _DOM.DOM.showgradebuttonid, \"Submit for Grade\", this.grademodal.show.bind(this.grademodal));\n            // Bind modal button to grade submission function\n            document.getElementById(_DOM.DOM.gradeformid).addEventListener(\"submit\", function (e) {\n                return _this2.submitForGrade(e);\n            });\n        }\n\n        /**\n        *\n        */\n\n    }, {\n        key: \"createFeedbackInput\",\n        value: function createFeedbackInput() {\n            var _this3 = this;\n\n            if (this.feedbackmodal != undefined) {\n                this.feedbackmodal.remove();\n                this.feedbackmodal = undefined;\n            }\n            this.feedbackmodal = new _Modal.Modal({\n                parentid: _DOM.DOM.modaldivid,\n                modalid: _DOM.DOM.feedbackmodal,\n                modalclass: _DOM.DOM.modalclass,\n                header: \"Feedback\",\n                backgroundcolor: \"burlywood\",\n                content: function () {\n                    var feedbackmodalhtml = \"<form id=\\\"\" + _DOM.DOM.feedbackformid + \"\\\" method=\\\"POST\\\" class=\\\"pure-form pure-form-stacked\\\" data-email=\\\"SOMEEMAIL@email.net\\\"\\n      action=\\\"\" + feedbackcatcherURL + \"\\\">\";\n                    feedbackmodalhtml += \"<div class=\\\"\" + _DOM.DOM.textboxdivclass + \"\\\"><span class=\\\"\" + _DOM.DOM.textboxspanclass + \"\\\">Name:</span><br><input class=\\\"\" + _DOM.DOM.textboxclass + \"\\\" id=\\\"\" + _DOM.DOM.feedbacknametextid + \"\\\" required></input></div>\";\n                    feedbackmodalhtml += \"<div class=\\\"\" + _DOM.DOM.textboxdivclass + \"\\\"><span class=\\\"\" + _DOM.DOM.textboxspanclass + \"\\\">E-mail address:</span><br><input class=\\\"\" + _DOM.DOM.textboxclass + \"\\\" id=\\\"\" + _DOM.DOM.feedbackemailtextid + \"\\\" type=\\\"email\\\" required></input></div>\";\n                    feedbackmodalhtml += \"<div class=\\\"\" + _DOM.DOM.textboxdivclass + \"\\\"><span class=\\\"\" + _DOM.DOM.textboxspanclass + \"\\\">Feedback:</span><br><textarea class=\\\"\" + _DOM.DOM.textboxclass + \"\\\" id=\\\"\" + _DOM.DOM.feedbackinputtextid + \"\\\" required></textarea></div>\";\n                    feedbackmodalhtml += \"<button id=\\\"\" + _DOM.DOM.submitfeedbackbuttonid + \"\\\">Submit</button>\";\n                    feedbackmodalhtml += \"<p id=\" + _DOM.DOM.feedbackservererrorid + \" class=\\\"hidden error\\\">Error while submitting feedback to server. Check console for detailed http report.</p>\";\n                    feedbackmodalhtml += \"</form>\";\n                    return feedbackmodalhtml;\n                }()\n            });\n            document.getElementById(_DOM.DOM.feedbackformid).addEventListener(\"submit\", function (e) {\n                return _this3.submitFeedback(e);\n            });\n        }\n\n        /**\r\n            Submits grade to spreadsheet <br>\r\n            Followed example at: https://github.com/dwyl/learn-to-send-email-via-google-script-html-no-server\r\n        */\n\n    }, {\n        key: \"submitForGrade\",\n        value: function submitForGrade(e) {\n            this.disableElement(_DOM.DOM.submitgradebuttonid);\n            document.getElementById(_DOM.DOM.gradeservererrorid).classList.add(_DOM.DOM.hiddenclass);\n            e.preventDefault(); // Prevent default form submission, use xhr\n            var data = this.getGradeSubmissionData();\n\n            //        if (data.cuid.length != 9) {\n            //            console.log('BAD ID LENGTH');\n            //            return false;\n            //        } else if (data.name.length === 0) {\n            //            console.log('BAD NAME LENGTH');\n            //            return false;\n            //        } else if (parseFloat(data.course.length) <= 0) {\n            //            console.log('BAD COURSE ID');\n            //            return false;\n            //        } else {\n            var url = e.target.action;\n            var method = 'POST';\n            var xhr = new XMLHttpRequest();\n            xhr.open(method, url);\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            xhr.onreadystatechange = function () {\n                if (xhr.status == 200) {\n                    document.getElementById(_DOM.DOM.gradeformid).innerHTML = \"Your grade has been submitted.\";\n                } else {\n                    document.getElementById(_DOM.DOM.submitgradebuttonid).classList.remove(_DOM.DOM.disabledclass);\n                    document.getElementById(_DOM.DOM.gradeservererrorid).classList.remove(_DOM.DOM.hiddenclass);\n                    console.log(xhr.status, xhr.statusText, xhr.responseText);\n                }\n                return;\n            };\n            var encoded = Object.keys(data).map(function (k) {\n                return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]);\n            }).join('&');\n            xhr.send(encoded);\n            //        }\n        }\n    }, {\n        key: \"submitFeedback\",\n        value: function submitFeedback(e) {\n            this.disableElement(_DOM.DOM.submitfeedbackbuttonid);\n            document.getElementById(_DOM.DOM.feedbackservererrorid).classList.add(_DOM.DOM.hiddenclass);\n            e.preventDefault(); // Prevent default form submission, use xhr\n            var data = this.getFeedbackSubmissionData();\n\n            var url = e.target.action;\n            var method = 'POST';\n            var xhr = new XMLHttpRequest();\n            xhr.open(method, url);\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            xhr.onreadystatechange = function () {\n                if (xhr.status == 200) {\n                    document.getElementById(_DOM.DOM.feedbackformid).innerHTML = \"Thank you, your feedback has been recorded.\";\n                    setTimeout(this.createFeedbackInput.bind(this), 3000);\n                } else {\n\n                    document.getElementById(_DOM.DOM.submitfeedbackbuttonid).classList.remove(_DOM.DOM.disabledclass);\n                    document.getElementById(_DOM.DOM.feedbackservererrorid).classList.remove(_DOM.DOM.hiddenclass);\n                    console.log(xhr.status, xhr.statusText, xhr.responseText);\n                }\n                return;\n            }.bind(this);\n            var encoded = Object.keys(data).map(function (k) {\n                return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]);\n            }).join('&');\n            xhr.send(encoded);\n        }\n\n        /**\r\n        *\r\n        */\n\n    }, {\n        key: \"showfeedback\",\n        value: function showfeedback() {\n            this.feedbackmodal.show();\n            document.getElementById(_DOM.DOM.feedbacknametextid).focus();\n        }\n\n        /**\r\n         * Gathers data from the page to submit to the spreadsheet\r\n         * @return {object} Data that will be passed to the web server\r\n         */\n\n    }, {\n        key: \"getGradeSubmissionData\",\n        value: function getGradeSubmissionData() {\n            var data = {};\n            data.course = document.getElementById(_DOM.DOM.gradecoursetextid).value;\n            data.title = this.title;\n            data.name = document.getElementById(_DOM.DOM.gradenametextid).value;\n            data.cuid = document.getElementById(_DOM.DOM.gradecuidtextid).value;\n            data.score = this.sumScore().pct.toFixed(2);\n\n            data.formDataNameOrder = JSON.stringify([\"course\", \"title\", \"name\", \"cuid\", \"score\"]); // The data, in order, that is inserted into the sheet\n            data.formGoogleSheetName = data.course; // The subsheet to insert data onto\n\n            return data;\n        }\n\n        /**\n         * Gathers data from the page to submit to the spreadsheet\n         * @return {object} Data that will be passed to the web server\n         */\n\n    }, {\n        key: \"getFeedbackSubmissionData\",\n        value: function getFeedbackSubmissionData() {\n            var data = {};\n            data.title = this.title;\n            data.name = document.getElementById(_DOM.DOM.feedbacknametextid).value;\n            data.email = document.getElementById(_DOM.DOM.feedbackemailtextid).value;\n            data.feedback = document.getElementById(_DOM.DOM.feedbackinputtextid).value;\n            data.variables = JSON.stringify(this.variablevalues);\n            data.score = JSON.stringify(this.score);\n            data.currentquestion = this.currentquestion + 1;\n            data.formDataNameOrder = \"[\\\"title\\\", \\\"name\\\", \\\"email\\\", \\\"feedback\\\", \\\"question\\\", \\\"score\\\", \\\"variables\\\"]\"; // The data, in order, that is inserted into the sheet\n            data.formGoogleSheetName = \"feedback\"; // The subsheet to insert data onto\n\n            return data;\n        }\n\n        /**\r\n            Gets the total score for the problem\r\n            return {object} Score object containing \"got\", \"max\", and \"pct\" keys\r\n        */\n\n    }, {\n        key: \"sumScore\",\n        value: function sumScore() {\n            var sumscore = 0;\n            var sumpoints = 0;\n            for (var i in this.score) {\n                sumscore += this.score[i].got;\n                sumpoints += this.score[i].max;\n            }\n            return {\n                \"got\": sumscore,\n                \"max\": sumpoints,\n                \"pct\": sumscore / sumpoints\n            };\n        }\n\n        /**\r\n        *\r\n        */\n\n    }, {\n        key: \"togglescore\",\n        value: function togglescore() {\n            document.getElementById(_DOM.DOM.scoredivid).classList.toggle(_DOM.DOM.hiddenclass);\n            var expandtext = \"â² Score â²\";\n            var retracttext = \"â¼ Score â¼\";\n            var btn = document.getElementById(_DOM.DOM.scorebuttonid);\n            if (btn.textContent == expandtext) {\n                btn.textContent = retracttext;\n            } else {\n                btn.textContent = expandtext;\n            }\n        }\n\n        /**\r\n            Update score summary table on page\r\n        */\n\n    }, {\n        key: \"updateScores\",\n        value: function updateScores() {\n            var container = document.getElementById(_DOM.DOM.scoredivid);\n\n            // Clear score objects from html\n            while (container.hasChildNodes()) {\n                container.firstChild.remove();\n            }\n\n            // Create new score object\n            //let html = `<div id=${DOM.scoretitleid}>SCORE</div>`;\n            var html = \"\";\n            html += \"<table>\";\n            html += \"<tr><th>Step</th><th>Points</th><th>Total</th><th>Pct</th></tr>\";\n            for (var i in this.score) {\n                // Apply formatting to current question\n                var cur = \"\";\n                if (i == this.currentquestion) {\n                    cur = _DOM.DOM.currentquestionid;\n                }\n                html += \"<tr><td id=\\\"\" + cur + \"\\\">\" + (parseFloat(i) + 1) + \"</td><td>\" + (0, _skyHelpers.roundTo)(this.score[i].got, 2) + \"</td><td>\" + (0, _skyHelpers.roundTo)(this.score[i].max, 2) + \"</td><td>\" + (0, _skyHelpers.roundTo)(this.score[i].pct * 100, 0) + \"%</td></tr>\";\n            }\n            var sumscore = this.sumScore();\n            html += \"<tr id=\\\"\" + _DOM.DOM.lastscorerowid + \"\\\"><td>Total</td><td>\" + (0, _skyHelpers.roundTo)(sumscore.got, 2) + \"</td><td>\" + (0, _skyHelpers.roundTo)(sumscore.max, 2) + \"</td><td>\" + (0, _skyHelpers.roundTo)(sumscore.pct * 100, 0) + \"%</td></tr>\";\n            html += \"</table>\";\n\n            container.insertAdjacentHTML(\"beforeend\", html);\n        }\n\n        /**\r\n            Insert a dismissable tip box on the page\r\n            @param {string} tip Text content\r\n            @param {int} left Left position of box (in px)\r\n            @param {int} top Top position of box (in px)\r\n            @param {string} uuid Unique id\r\n        */\n\n    }, {\n        key: \"insertTipBox\",\n        value: function insertTipBox(tip, left, top, uuid) {\n            var COOKIEEXPIRATION = 30 * 1000; // In milliseconds\n            var container = document.getElementById(_DOM.DOM.bodydivid);\n            // Generate uuid from tip string\n            uuid = tip.hashCode();\n            // If haven't been told to not show\n            if (!(0, _skyHelpers.getCookie)(uuid) === true) {\n                // Create id strings\n                var re = new RegExp(VAR + \"id\" + VAR, \"g\");\n                var divid = _DOM.DOM.tipboxdivid.replace(re, uuid);\n                var checkid = _DOM.DOM.tipboxcheckid.replace(re, uuid);\n                var buttonid = _DOM.DOM.tipboxbuttonid.replace(re, uuid);\n                // Create html payload for tip\n                var html = \"<div class=\\\"\" + _DOM.DOM.tipboxdivclass + \"\\\" id=\\\"\" + divid + \"\\\" style=\\\"left: \" + left + \"px; top:\" + top + \"px;\\\">\\n                        <span class=\\\"\" + _DOM.DOM.tipboxtextclass + \"\\\">\" + tip + \"</span>\\n                        <br>\\n                        <input type=\\\"checkbox\\\" id=\\\"\" + checkid + \"\\\">\\n                        <span class=\\\"\" + _DOM.DOM.tipboxdontshowclass + \"\\\">don't show this again</span>\\n                        <button class=\\\"\" + _DOM.DOM.tipboxbuttonclass + \"\\\" id=\\\"\" + buttonid + \"\\\">OK</button>\\n                        </div>\";\n                // Function for closing tip and creating cookie\n                var f = function f() {\n                    //console.log(\"I am tip #\", uuid);\n                    // Set cookie if told to not show again\n                    if (document.getElementById(checkid).checked) {\n                        (0, _skyHelpers.setCookie)(uuid, true, COOKIEEXPIRATION);\n                    }\n                    document.getElementById(divid).remove();\n                };\n                // Add box to html\n                container.insertAdjacentHTML(\"beforeend\", html);\n                // Create event listener on button\n                document.getElementById(buttonid).addEventListener(\"click\", function (e) {\n                    return f(e);\n                });\n            }\n        }\n\n        /**\r\n            Display current question to page\r\n        */\n\n    }, {\n        key: \"display\",\n        value: function display() {\n            // Clear current page elements\n            this.clearPage();\n            if (this.currentquestion > -1) {\n                // Add current question objects to html\n                if (this.currentquestion < this.questions.length) {\n                    // TODO remove this if wrapper, instead remove event from Next button\n                    this.questions[this.currentquestion].display(this.variablevalues);\n                }\n            }\n            this.updateScores();\n            // Slide scores off screen\n\n            /*      TEST COOKIE TIPS\r\n            this.insertTipBox(\"Interact with the graph by clicking and dragging elements\", 270, 300);\r\n            this.insertTipBox(\"Type answers into text fields (case insensitive)\", 530, 720);\r\n            this.insertTipBox(\"Click here to start over with new values\", 2, 890);\r\n            this.insertTipBox(\"Click here to get a hint on the current step\", 206, 890);\r\n            this.insertTipBox(\"Click here to check your answers and move on to the next step\", 410, 890);\r\n            //*/\n        }\n\n        /**\r\n            Repeat the current question\r\n        */\n\n    }, {\n        key: \"repeat\",\n        value: function repeat() {\n            this.currentquestion--;\n            this.next();\n        }\n\n        /**\r\n        *   Inserts HTML for a button with specified properties <br>\r\n        *   Uses weird string calling because arrow functions are odd\r\n        *   @param {string} containerid ID of container element for button\r\n        *   @param {string} buttonid ID of button\r\n        *   @param {string} buttontext Text to display in button\r\n        *   @param {string} callback Name of function in {@link ProblemController}\r\n        *   @param {string} [location=\"beforeend\"] Where to insert html in container\r\n        */\n\n    }, {\n        key: \"insertButton\",\n        value: function insertButton(containerid, buttonid, buttontext, callback) {\n            var location = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"beforeend\";\n\n            var container = document.getElementById(containerid);\n            var html = \"<button id=\\\"\" + buttonid + \"\\\">\" + buttontext + \"</button>\";\n            container.insertAdjacentHTML(location, html);\n            document.getElementById(buttonid).addEventListener(\"click\", callback);\n        }\n\n        /**\r\n        *\r\n        */\n\n    }, {\n        key: \"removeElement\",\n        value: function removeElement(elementid) {\n            if (document.getElementById(elementid)) {\n                document.getElementById(elementid).remove();\n            } else {\n                console.log(\"element \" + elementid + \" does not exist\");\n                console.trace();\n            }\n        }\n\n        /**\r\n        *\r\n        */\n\n    }, {\n        key: \"enableElement\",\n        value: function enableElement(elementid) {\n            document.getElementById(elementid).classList.remove(_DOM.DOM.disabledclass);\n        }\n\n        /**\r\n        *\r\n        */\n\n    }, {\n        key: \"disableElement\",\n        value: function disableElement(elementid) {\n            document.getElementById(elementid).classList.add(_DOM.DOM.disabledclass);\n        }\n\n        /**\r\n        *\r\n        */\n\n    }, {\n        key: \"hideElement\",\n        value: function hideElement(elementid) {\n            document.getElementById(elementid).classList.add(_DOM.DOM.hiddenclass);\n        }\n\n        /**\r\n        *\r\n        */\n\n    }, {\n        key: \"showElement\",\n        value: function showElement(elementid) {\n            document.getElementById(elementid).classList.remove(_DOM.DOM.hiddenclass);\n        }\n\n        /**\r\n         *  Begin the question\r\n         */\n\n    }, {\n        key: \"begin\",\n        value: function begin() {\n            this.hasbegun = true;\n            this.removeElement(_DOM.DOM.beginbuttonid);\n            this.insertButton(_DOM.DOM.buttonsdivid, _DOM.DOM.scorebuttonid, \"â² Score â²\", this.togglescore.bind(this));\n            this.insertButton(_DOM.DOM.buttonsdivid, _DOM.DOM.feedbackbuttonid, \"Feedback\", this.showfeedback.bind(this));\n            this.insertButton(_DOM.DOM.buttonsdivid, _DOM.DOM.restartbuttonid, \"Restart Problem\", this.promptrestart.bind(this));\n            this.insertButton(_DOM.DOM.buttonsdivid, _DOM.DOM.hintbuttonid, \"Hint\", this.showhint.bind(this));\n            this.insertButton(_DOM.DOM.buttonsdivid, _DOM.DOM.submitbuttonid, \"Submit Answers\", this.submit.bind(this));\n            this.insertButton(_DOM.DOM.buttonsdivid, _DOM.DOM.nextbuttonid, \"Next Part\", this.next.bind(this));\n\n            // Start question sequence\n            this.currentquestion = -1;\n            this.next();\n        }\n\n        /**\r\n            Show the hints for the current {@link Question}\r\n        */\n\n    }, {\n        key: \"showhint\",\n        value: function showhint(e) {\n            this.disableElement(_DOM.DOM.hintbuttonid);\n            // Loop through all hints, remove hidden text class\n            var elements = document.getElementsByClassName(_DOM.DOM.hiddentextclass);\n            while (elements[0]) {\n                elements[0].classList.remove(_DOM.DOM.hiddentextclass);\n            }\n        }\n\n        /**\r\n            Check user-submitted answers, show correct answers, update score\r\n        */\n\n    }, {\n        key: \"submit\",\n        value: function submit() {\n            var _this4 = this;\n\n            this.reviewing = true;\n            this.showElement(_DOM.DOM.nextbuttonid);\n            // Update score for this question, call Question.submit\n            this.score[this.currentquestion] = this.questions[this.currentquestion].submit();\n            if (this.score[this.currentquestion].pct >= this.questions[this.currentquestion].requiredscore) {\n                // If on last question, adjust button label and click event\n                if (this.currentquestion == this.questions.length - 1) {\n                    document.getElementById(_DOM.DOM.nextbuttonid).textContent = \"Finish\";\n                    document.getElementById(_DOM.DOM.nextbuttonid).addEventListener(\"click\", function (e) {\n                        return _this4.finish(e);\n                    });\n                }\n            } else {\n                document.getElementById(_DOM.DOM.nextbuttonid).textContent = \"Retry\";\n            }\n            this.disableElement(_DOM.DOM.submitbuttonid);\n            this.showElement(_DOM.DOM.nextbuttonid);\n            if (this.score[this.currentquestion].pct < 1) {\n                this.showhint();\n            }\n            this.updateScores();\n            this.defocus();\n        }\n\n        /**\r\n            Finish reviewing correct answers, move on to the next question\r\n        */\n\n    }, {\n        key: \"next\",\n        value: function next() {\n            this.reviewing = false;\n            if (this.currentquestion < this.questions.length - 1) {\n                this.hideElement(_DOM.DOM.nextbuttonid); //this.hideElement(DOM.nextbuttonid);\n                this.enableElement(_DOM.DOM.submitbuttonid);\n                this.enableElement(_DOM.DOM.hintbuttonid);\n\n                this.currentquestion++;\n                this.display();\n\n                window.scrollTo(0, 0); // Move to top of page\n            } else {\n                this.finish();\n            }\n            this.defocus();\n        }\n\n        /**\r\n            Finish the problem, display the finishing page\r\n        */\n\n    }, {\n        key: \"finish\",\n        value: function finish() {\n            if (!this.finished) {\n                this.finished = true;\n                this.clearPage();\n                this.removeElement(_DOM.DOM.hintbuttonid);\n                this.removeElement(_DOM.DOM.submitbuttonid);\n                this.removeElement(_DOM.DOM.nextbuttonid);\n                this.insertScoreInput();\n                this.updateScores();\n                this.finishquestion.display(this.variablevalues);\n                document.getElementById(_DOM.DOM.scoredivid).classList.remove(_DOM.DOM.hiddenclass);\n            }\n        }\n    }]);\n\n    return ProblemController;\n}();\n\n//# sourceURL=webpack:///./src/ProblemController.js?");

/***/ }),

/***/ "./src/Question.js":
/*!*************************!*\
  !*** ./src/Question.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Question = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _DOM = __webpack_require__(/*! ./DOM.js */ \"./src/DOM.js\");\n\nvar _CanvasElement = __webpack_require__(/*! ./CanvasElement.js */ \"./src/CanvasElement.js\");\n\nvar _TextElement = __webpack_require__(/*! ./TextElement.js */ \"./src/TextElement.js\");\n\nvar _TextboxElement = __webpack_require__(/*! ./TextboxElement.js */ \"./src/TextboxElement.js\");\n\nvar _skyHelpers = __webpack_require__(/*! ./sky-helpers.js */ \"./src/sky-helpers.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n    Container class for each question <br>\r\n    Consists of elements displayed sequentially on the page\r\n*/\nvar VAR = \"@\";\n\nvar Question = exports.Question = function () {\n    /**\r\n        @param {object} inputarguments\r\n        @param {object} inputarguments.variables: Data for variables used in problem\r\n        @param {list} inputarguments.questionelements List of question element data objects\r\n        @param {float} inputarguments.requiredscore Required % score to move on (0 to 1)\r\n    */\n    function Question(inputarguments) {\n        _classCallCheck(this, Question);\n\n        this.variables = { \"constants\": {},\n            \"random\": {},\n            \"calculated\": {} };\n        this.elements = [];\n        this.html = \"\";\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = Object.keys(inputarguments)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var key = _step.value;\n\n                this[key] = inputarguments[key];\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        if (\"variables\" in inputarguments) {\n            this.variables = JSON.parse(JSON.stringify(inputarguments.variables));\n        }\n        this.createHTML(inputarguments.questionelements);\n    }\n\n    /**\r\n        Creates the appropriate class for a given element\r\n        @param {object} elementdata The data object containing everything about the element\r\n        @param {string} elementdata.type \"text\", \"graph\", or \"textbox\"\r\n        @return {TextElement|CanvasElement|TextboxElement} The class instance for the element\n    */\n\n\n    _createClass(Question, [{\n        key: \"createElement\",\n        value: function createElement(elementdata) {\n            if (elementdata.type === \"textbox\") {\n                return new _TextboxElement.TextboxElement(elementdata);\n            } else if (elementdata.type === \"graph\") {\n                return new _CanvasElement.CanvasElement(elementdata);\n            } else if (elementdata.type === \"text\") {\n                return new _TextElement.TextElement(elementdata);\n            }\n        }\n\n        /**\r\n            TODO\r\n        */\n\n    }, {\n        key: \"createHTML\",\n        value: function createHTML(inputelements) {\n            var recursion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = inputelements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var element = _step2.value;\n\n                    // Swap between rows and columns\n                    if (recursion % 2 == 0) {\n                        this.html += \"<div class=\\\"row\\\">\";\n                    } else {\n                        this.html += \"<div class=\\\"column\\\">\";\n                    }\n                    // If an array is found, call recursively, otherwise add element html\n                    if (element instanceof Array) {\n                        this.createHTML(element, recursion + 1);\n                    } else {\n                        this.elements.push(this.createElement(element));\n                        this.html += this.elements[this.elements.length - 1].getHTML(this.elements.length - 1);\n                    }\n                    // Finish row/column\n                    this.html += \"</div>\";\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        }\n\n        /**\r\n            The total point worth of the question\r\n        */\n\n    }, {\n        key: \"assignVariables\",\n\n\n        /**\r\n            Replace variable placeholders with values in all contained elements\r\n        */\n        value: function assignVariables() {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this.elements[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var element = _step3.value;\n\n                    // Prevent infinite recursion\n                    var maxloops = 100;\n                    var loops = 0;\n                    while ((0, _skyHelpers.recursiveExists)(element, \"\" + VAR)) {\n                        var _iteratorNormalCompletion4 = true;\n                        var _didIteratorError4 = false;\n                        var _iteratorError4 = undefined;\n\n                        try {\n                            for (var _iterator4 = Object.keys(this.variablevalues)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                                var variable = _step4.value;\n\n                                // Replace variable strings with values\n                                element = (0, _skyHelpers.recursiveReplace)(element, \"\" + VAR + variable + VAR, this.variablevalues[variable]);\n                            }\n                        } catch (err) {\n                            _didIteratorError4 = true;\n                            _iteratorError4 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                    _iterator4.return();\n                                }\n                            } finally {\n                                if (_didIteratorError4) {\n                                    throw _iteratorError4;\n                                }\n                            }\n                        }\n\n                        loops++;\n                        if (loops >= maxloops) {\n                            console.log('assignVariables failed:', (0, _skyHelpers.recursiveFind)(element, \"\" + VAR));\n                            break;\n                        }\n                    }\n                    // Convert number-like strings into numbers\n                    element = (0, _skyHelpers.recursiveNumberfy)(element);\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n        }\n\n        /**\r\n            Display this question\n            @param {object} parentvariables Variable values from parent (ProblemController)\r\n        */\n\n    }, {\n        key: \"display\",\n        value: function display(parentvariables) {\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n\n                for (var _iterator5 = Object.keys(parentvariables)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var name = _step5.value;\n\n                    // If variable is not defined more locally\n                    if (!(name in this.variables.constants)) {\n                        // Inherit variable from parent\n                        this.variables.constants[name] = parentvariables[name];\n                    }\n                }\n                // Generate variable values\n            } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                        _iterator5.return();\n                    }\n                } finally {\n                    if (_didIteratorError5) {\n                        throw _iteratorError5;\n                    }\n                }\n            }\n\n            this.variablevalues = (0, _skyHelpers.generateVariables)(this.variables);\n            // Replace variables in html\n            var maxloops = 100;\n            var loops = 0;\n            while (this.html.indexOf(\"\" + VAR) > -1) {\n                var _iteratorNormalCompletion6 = true;\n                var _didIteratorError6 = false;\n                var _iteratorError6 = undefined;\n\n                try {\n                    for (var _iterator6 = Object.keys(this.variablevalues)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                        var variable = _step6.value;\n\n                        this.html = this.html.replace(\"\" + VAR + variable + VAR, this.variablevalues[variable]);\n                    }\n                } catch (err) {\n                    _didIteratorError6 = true;\n                    _iteratorError6 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                            _iterator6.return();\n                        }\n                    } finally {\n                        if (_didIteratorError6) {\n                            throw _iteratorError6;\n                        }\n                    }\n                }\n\n                loops++;\n                if (loops >= maxloops) {\n                    console.log('assign variables in html failed:', this.html);\n                    console.log(\"\" + this.html.indexOf(VAR));\n                    break;\n                }\n            }\n            // Replace variables in elements\n            this.assignVariables();\n            // Insert question HTML\n            document.getElementById(_DOM.DOM.questiondivid).insertAdjacentHTML(\"beforeend\", this.html);\n            // Create GraphCanvasController objects for each CanvasElement\n            for (var i in this.elements) {\n                if (this.elements[i] instanceof _CanvasElement.CanvasElement) {\n                    this.elements[i].init(i);\n                }\n            }\n        }\n\n        /**\r\n            Check answers and display correct ones\n            @return {score} Score object containing \"got\", \"max\", and \"pct\" keys\r\n        */\n\n    }, {\n        key: \"submit\",\n        value: function submit() {\n            // Add up score and reveal answers\n            var score = { \"max\": 0,\n                \"got\": 0,\n                \"pct\": 0 };\n            for (var i in this.elements) {\n                var element = this.elements[i];\n                if (element instanceof _TextboxElement.TextboxElement) {\n                    var re = new RegExp(VAR + \"id\" + VAR, \"g\");\n                    // Disable textbox\n                    document.getElementById(_DOM.DOM.textboxid.replace(re, i)).disabled = true;\n                    // Get answer from textbox\n                    var ans = document.getElementById(_DOM.DOM.textboxid.replace(re, i)).value;\n                    // Check answer\n                    score.max += element.points;\n                    score.got += element.points * element.checkanswer(ans);\n                    // Display answer\n                    document.getElementById(_DOM.DOM.textboxanswerid.replace(re, i)).textContent = element.answer;\n                    // Add box around answer\n                    document.getElementById(_DOM.DOM.textboxanswerid.replace(re, i)).classList.add(_DOM.DOM.textboxanswershown);\n                } else if (element instanceof _CanvasElement.CanvasElement) {\n                    // Get answers from canvas\n                    var _ans = element.GraphCanvasController.getanswers();\n                    // Check answers\n                    score.max += element.points;\n                    score.got += element.points * element.checkanswer(_ans);\n                    element.GraphCanvasController.showanswers(element.answer);\n                }\n                score.pct = score.got / score.max;\n            }\n            return score;\n        }\n    }, {\n        key: \"totalPoints\",\n        get: function get() {\n            var total = 0;\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n                for (var _iterator7 = this.elements[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                    var element = _step7.value;\n\n                    if (element.points) {\n                        total += element.points;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                        _iterator7.return();\n                    }\n                } finally {\n                    if (_didIteratorError7) {\n                        throw _iteratorError7;\n                    }\n                }\n            }\n\n            return total;\n        }\n    }]);\n\n    return Question;\n}();\n\n//# sourceURL=webpack:///./src/Question.js?");

/***/ }),

/***/ "./src/QuestionElement.js":
/*!********************************!*\
  !*** ./src/QuestionElement.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n    Generic element for display on page\r\n*/\nvar QuestionElement = exports.QuestionElement = function () {\n    function QuestionElement(inputarguments) {\n        _classCallCheck(this, QuestionElement);\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = Object.keys(inputarguments)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var key = _step.value;\n\n                this[key] = inputarguments[key];\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n    /**\r\n        Inserts the HTML for a QuestionElement onto the page\r\n        @param {string} containerid HTML id of parent element\r\n        @param {string} html The HTML representation of the desired element\r\n    */\n\n\n    _createClass(QuestionElement, [{\n        key: \"insertHTML\",\n        value: function insertHTML(containerid, html) {\n            var container = document.getElementById(containerid);\n            container.insertAdjacentHTML(\"beforeend\", html);\n        }\n    }]);\n\n    return QuestionElement;\n}();\n\n//# sourceURL=webpack:///./src/QuestionElement.js?");

/***/ }),

/***/ "./src/Text.js":
/*!*********************!*\
  !*** ./src/Text.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Text = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Point = __webpack_require__(/*! ./Point.js */ \"./src/Point.js\");\n\nvar _skyHelpers = __webpack_require__(/*! ./sky-helpers.js */ \"./src/sky-helpers.js\");\n\nvar _GraphCanvasController = __webpack_require__(/*! ./GraphCanvasController.js */ \"./src/GraphCanvasController.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IDLENGTH = 16;\n\n/**\r\n    Text element for display through GraphCanvasController\n    @param {string} text Text to display\r\n    @param {string} [font=\"sans-serif\"] Which font to use\r\n    @param {string} [fontsize=\"20\"] Size of the font (in px)\r\n    @param {string} [fontstyle=\"\"] Styling of the font (bold, italic, etc)\r\n    @param {number} [align=\"left\"] Also accepts strings \"left\"=0, \"center\"=0.5, or \"right\"=1\r\n    @param {number} [valign=\"center\"] Also accepts strings \"top\"=0, \"center\"=0.5, or \"bottom\"=1\r\n    @param {string} [color=\"black\"] Color of text\r\n    @param {number} [opacity=1] Opacity of the text\r\n    @param {number} [rotate=0] Rotation of the text (in degrees, clockwise)\r\n    @param {Point} position Location of text on canvas\r\n*/\n\nvar Text = exports.Text = function () {\n    function Text(args) {\n        _classCallCheck(this, Text);\n\n        // Default values\n        this.ID = (0, _skyHelpers.randomID)(IDLENGTH);\n        this.text = \"\";\n        this.font = \"sans-serif\";\n        this.fontsize = \"20\";\n        this.fontstyle = \"\";\n        this.align = \"left\";\n        this.valign = \"center\";\n        this.color = \"black\";\n        /**\n            @name Text#layer\n            @type number\n            @default 3\n            @desc Layer to draw element onto\n        */\n        this.layer = _GraphCanvasController.LAYERS.OVER;\n        this.opacity = 1;\n        this.rotate = 0;\n        // Argument values\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = Object.keys(args)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var key = _step.value;\n\n                this[key] = args[key];\n            }\n            // Convert data to point if not\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        if (!(this.position instanceof _Point.Point)) {\n            if (this.graphinfo) {\n                this.position.graphinfo = this.graphinfo;\n            }\n            this.position = new _Point.Point(this.position);\n        }\n        // Convert text to string\n        this.text = String(this.text);\n    }\n    /**\r\n        @return {object} The internal data of the text\r\n    */\n\n\n    _createClass(Text, [{\n        key: \"data\",\n        value: function data() {\n            var r = {};\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = Object.keys(this)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var k = _step2.value;\n\n                    r[k] = this[k];\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            return r;\n        }\n    }, {\n        key: \"draw\",\n        value: function draw(context) {\n            // Set context variables\n            context.save();\n            context.translate(this.position.rawx, this.position.rawy);\n            context.rotate(this.rotate * Math.PI / 180);\n            // Plan variables\n            var plan = {\n                char: [],\n                x: [0],\n                y: [],\n                font: [],\n                color: [],\n                opacity: []\n            };\n            var subscale = 0.5;\n            var supoff = -.75;\n            var yoff = 0;\n            var charcolor = this.color;\n            var charopacity = this.opacity;\n            // Plan each letter\n            var i = 0;\n            while (i < this.text.length) {\n                while (this.text.charAt(i) === \"<\") {\n                    var command = this.text.slice(i, this.text.indexOf(\">\", i) + 1);\n                    if (command === \"<sub>\") {\n                        this.fontsize *= subscale;\n                    } else if (command === \"</sub>\") {\n                        this.fontsize /= subscale;\n                    } else if (command === \"<sup>\") {\n                        this.fontsize *= subscale;\n                        yoff += this.fontsize * supoff;\n                    } else if (command === \"</sup>\") {\n                        this.fontsize /= subscale;\n                        yoff -= this.fontsize * supoff;\n                    } else if (command.slice(0, 7) === \"<color:\") {\n                        charcolor = command.slice(7, command.indexOf(\">\"));\n                    } else if (command === \"</color>\") {\n                        charcolor = this.color;\n                    } else if (command.slice(0, 9) === \"<opacity:\") {\n                        charopacity = command.slice(9, command.indexOf(\">\"));\n                    } else if (command === \"</opacity>\") {\n                        charopacity = this.opacity;\n                    } else {\n                        console.log('Error in Text.draw(), command not recognized:', command);\n                        break;\n                    }\n                    i += command.length;\n                }\n                // Set plan\n                plan.char.push(this.text.charAt(i));\n                plan.font.push(this.fontstyle + \" \" + this.fontsize + \"px \" + this.font);\n                context.font = plan.font[plan.font.length - 1];\n                plan.color.push(charcolor);\n                plan.opacity.push(charopacity);\n                plan.x.push(plan.x[plan.x.length - 1] + context.measureText(this.text.charAt(i)).width);\n                plan.y.push(yoff);\n                i++;\n            }\n            // Change starting position to account for alignment\n            switch (this.align) {\n                case \"left\":\n                    this.align = 0;\n                    break;\n                case \"center\":\n                    this.align = 0.5;\n                    break;\n                case \"right\":\n                    this.align = 1;\n                    break;\n            }\n            var diff = plan.x[plan.x.length - 1] * this.align;\n            for (i = 0; i < plan.x.length; i++) {\n                plan.x[i] -= diff;\n            }\n\n            // Shift text to middle y based on largest font (capital M is hacky solution)\n            switch (this.valign) {\n                case \"top\":\n                    this.valign = 0;\n                    break;\n                case \"center\":\n                    this.valign = 0.5;\n                    break;\n                case \"bottom\":\n                    this.valign = 1;\n                    break;\n            }\n            context.font = this.fontstyle + \" \" + this.fontsize + \"px \" + this.font;\n            var lineheight = context.measureText('M').width;\n            for (i = 0; i < plan.y.length; i++) {\n                plan.y[i] += lineheight * this.valign;\n            }\n            // Draw letters\n            for (i = 0; i < plan.char.length; i++) {\n                context.font = plan.font[i];\n                context.fillStyle = plan.color[i];\n                context.globalAlpha = plan.opacity[i];\n                context.fillText(plan.char[i], plan.x[i], plan.y[i]);\n            }\n            context.restore();\n        }\n    }]);\n\n    return Text;\n}();\n\n//# sourceURL=webpack:///./src/Text.js?");

/***/ }),

/***/ "./src/TextElement.js":
/*!****************************!*\
  !*** ./src/TextElement.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TextElement = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _DOM = __webpack_require__(/*! ./DOM.js */ \"./src/DOM.js\");\n\nvar _QuestionElement2 = __webpack_require__(/*! ./QuestionElement.js */ \"./src/QuestionElement.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n    Container class for basic text display\r\n*/\nvar TextElement = exports.TextElement = function (_QuestionElement) {\n    _inherits(TextElement, _QuestionElement);\n\n    /**\r\n        @param {object} inputarguments\r\n        @param {string} inputarguments.label Text to display\r\n        @param {string} inputarguments.class CSS classes to apply\n    */\n    function TextElement(inputarguments) {\n        _classCallCheck(this, TextElement);\n\n        return _possibleConstructorReturn(this, (TextElement.__proto__ || Object.getPrototypeOf(TextElement)).call(this, inputarguments));\n    }\n    /**\r\n        Generates the HTML for this element\r\n        @param {object} DOM Document object model name associations\n        @param {int} id Unique id to be included in the HTML elements\r\n    */\n\n\n    _createClass(TextElement, [{\n        key: \"getHTML\",\n        value: function getHTML(id) {\n            var html = \"<span class=\\\"\" + _DOM.DOM.textspanclass + \" \" + this.class + \"\\\">\" + this.label + \"</span>\";\n            return html;\n        }\n        /**\r\n            Inserts the HTML for a this element\r\n            @param {object} DOM Document object model name associations\r\n            @param {string} containerid HTML id of parent element\r\n            @param {int} id Unique id to be included in the HTML elements\r\n        */\n\n    }, {\n        key: \"insertHTML\",\n        value: function insertHTML(containerid, id) {\n            _get(TextElement.prototype.__proto__ || Object.getPrototypeOf(TextElement.prototype), \"insertHTML\", this).call(this, containerid, this.getHTML(id));\n        }\n    }]);\n\n    return TextElement;\n}(_QuestionElement2.QuestionElement);\n\n//# sourceURL=webpack:///./src/TextElement.js?");

/***/ }),

/***/ "./src/TextboxElement.js":
/*!*******************************!*\
  !*** ./src/TextboxElement.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TextboxElement = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _DOM = __webpack_require__(/*! ./DOM.js */ \"./src/DOM.js\");\n\nvar _QuestionElement2 = __webpack_require__(/*! ./QuestionElement.js */ \"./src/QuestionElement.js\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar VAR = \"@\";\n\n/**\r\n    Container class for textbox-entry questions\r\n*/\n\nvar TextboxElement = exports.TextboxElement = function (_QuestionElement) {\n    _inherits(TextboxElement, _QuestionElement);\n\n    /**\r\n        @param {object} inputarguments\r\n        @param {string} inputarguments.placeholder Placeholder text in textbox\r\n        @param {string} inputarguments.answertype \"number\" or \"text\"\r\n        @param {float|string} inputarguments.answer Correct answer\r\n        @param {object} inputarguments.tolerance Range above or below answer to count as correct\r\n        @param {float} inputarguments.tolerance.x\r\n        @param {float} inputarguments.tolerance.y\r\n        @param {int} inputarguments.points Number of points question is worth\r\n    */\n    function TextboxElement(inputarguments) {\n        _classCallCheck(this, TextboxElement);\n\n        return _possibleConstructorReturn(this, (TextboxElement.__proto__ || Object.getPrototypeOf(TextboxElement)).call(this, inputarguments));\n    }\n    /**\r\n        Checks the answer of the TextboxElement\r\n        @param {float|string} answer The user-submitted answer\r\n        @return {float} Correctness (0 to 1)\r\n    */\n\n\n    _createClass(TextboxElement, [{\n        key: \"checkanswer\",\n        value: function checkanswer(answer) {\n            if (this.answertype === \"number\") {\n                // If user entered a number as 45%, convert to 0.45\n                if (answer.slice(-1) === \"%\") {\n                    answer = parseFloat(answer) / 100;\n                }\n                if (parseFloat(answer) >= this.answer - this.tolerance && parseFloat(answer) <= this.answer + this.tolerance) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            } else if (this.answertype === \"text\") {\n                if (answer.toUpperCase().trim() === this.answer.toUpperCase().trim()) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        }\n        /**\r\n            Generates the HTML for this element\n            @param {int} id Unique id to be included in the HTML elements\r\n        */\n\n    }, {\n        key: \"getHTML\",\n        value: function getHTML(id) {\n            var html = \"<div class=\\\"\" + _DOM.DOM.textboxdivclass + \"\\\">\";\n            html += \"<input class=\\\"\" + _DOM.DOM.textboxclass + \"\\\" placeholder=\\\"\" + this.placeholder + \"\\\" id=\\\"\" + _DOM.DOM.textboxid + \"\\\">\";\n            html += \"<br><br>\";\n            html += \"<span class=\\\"\" + _DOM.DOM.textboxanswerclass + \"\\\" id=\\\"\" + _DOM.DOM.textboxanswerid + \"\\\"></span>\";\n            html += \"</input></div>\";\n            html = html.replace(new RegExp(VAR + \"id\" + VAR, \"g\"), id);\n            return html;\n        }\n        /**\r\n            Inserts the HTML for this element\n            @param {string} containerid HTML id of parent element\r\n            @param {int} id Unique id to be included in the HTML elements\r\n        */\n\n    }, {\n        key: \"insertHTML\",\n        value: function insertHTML(containerid, id) {\n            _get(TextboxElement.prototype.__proto__ || Object.getPrototypeOf(TextboxElement.prototype), \"insertHTML\", this).call(this, containerid, this.getHTML(id));\n        }\n    }]);\n\n    return TextboxElement;\n}(_QuestionElement2.QuestionElement);\n\n//# sourceURL=webpack:///./src/TextboxElement.js?");

/***/ }),

/***/ "./src/ZCanvas.js":
/*!************************!*\
  !*** ./src/ZCanvas.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n    Stacked canvases for drawing on different layers\n    @param {int} args.layers Number of layers\n    @param {int} args.width Width of canvases\n    @param {int} args.height Height of canvases\n    @param {string} args.containerid ID of container element\n    @param {string} args.containerclass class of container element\n    @param {string} args.canvasidprefix ID of each canvas, postpended by its layer number\n    @param {string} args.canvasclass Classes added to each canvas\n    @param {string} args.parentid ID of element to be inserted into\n*/\nvar ZCanvas = exports.ZCanvas = function () {\n    function ZCanvas(args) {\n        _classCallCheck(this, ZCanvas);\n\n        // Pull in arguments\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = Object.keys(args)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var key = _step.value;\n\n                this[key] = args[key];\n            }\n            // If parentid is given, insert html\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        if (document.getElementById(this.parentid)) {\n            document.getElementById(this.parentid).insertAdjacentHTML(\"beforeend\", this.getHTML());\n        }\n        // If elements exist, link to them\n        if (document.getElementById(this.containerid)) {\n            this.link();\n        }\n    }\n\n    /**\n    *   Generates the HTML for a ZCanvas container and internal canvases\n    *   @returns { string}  The html block\n    */\n\n\n    _createClass(ZCanvas, [{\n        key: \"getHTML\",\n        value: function getHTML() {\n            var html = \"<div id=\\\"\" + this.containerid + \"\\\" class=\\\"\" + this.containerclass + \"\\\" style=\\\"position:relative; min-width:\" + this.width + \"px; min-height:\" + this.height + \"px;\\\">\";\n            for (var i = 0; i < this.layers; i++) {\n                html += \"<canvas id=\\\"\" + this.containerid + \"-\" + this.canvasidprefix + i + \"\\\" class=\\\"\" + this.canvasclass + \"\\\" style=\\\"z-index:\" + i + \"; position:absolute;\\\"></canvas>\";\n            }\n            html += \"</div>\";\n            return html;\n        }\n    }, {\n        key: \"link\",\n\n\n        /**\n        *   Connects the canvas elements to this object and sets the size\n        */\n        value: function link() {\n            if (document.getElementById(\"\" + this.containerid)) {\n                this.canvas = {};\n                this.ctx = {};\n                for (var i = 0; i < this.layers; i++) {\n                    this.canvas[i] = document.getElementById(this.containerid + \"-\" + this.canvasidprefix + i);\n                    this.canvas[i].width = this.width;\n                    this.canvas[i].height = this.height;\n                    this.ctx[i] = this.canvas[i].getContext(\"2d\");\n                }\n                this.updateTopBottom();\n            } else {\n                console.log('Error initializing ZCanvas, does not exist in document yet.', this);\n            }\n        }\n    }, {\n        key: \"updateTopBottom\",\n        value: function updateTopBottom() {\n            this.canvas[\"top\"] = this.canvas[this.layers - 1];\n            this.canvas[\"bottom\"] = this.canvas[0];\n            this.ctx[\"top\"] = this.ctx[this.layers - 1];\n            this.ctx[\"bottom\"] = this.ctx[0];\n        }\n    }], [{\n        key: \"getHTMLSkeleton\",\n        value: function getHTMLSkeleton(args) {\n            var html = \"<div id=\\\"\" + args.containerid + \"\\\" class=\\\"\" + args.containerclass + \"\\\" style=\\\"position:relative; min-width:\" + args.width + \"px; min-height:\" + args.height + \"px;\\\">\";\n            for (var i = 0; i < args.layers; i++) {\n                html += \"<canvas id=\\\"\" + args.containerid + \"-\" + args.canvasidprefix + i + \"\\\" class=\\\"\" + args.canvasclass + \"\\\" style=\\\"z-index:\" + i + \"; position:absolute;\\\"></canvas>\";\n            }\n            html += \"</div>\";\n            return html;\n        }\n    }]);\n\n    return ZCanvas;\n}();\n\n//# sourceURL=webpack:///./src/ZCanvas.js?");

/***/ }),

/***/ "./src/sky-helpers.js":
/*!****************************!*\
  !*** ./src/sky-helpers.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.getDist = getDist;\nexports.getRandom = getRandom;\nexports.roundTo = roundTo;\nexports.ifTF = ifTF;\nexports.FindRoot = FindRoot;\nexports.FindRootMulti = FindRootMulti;\nexports.randomID = randomID;\nexports.isIterable = isIterable;\nexports.recursiveReplace = recursiveReplace;\nexports.recursiveNumberfy = recursiveNumberfy;\nexports.recursiveExists = recursiveExists;\nexports.recursiveFind = recursiveFind;\nexports.isBetween = isBetween;\nexports.constrain = constrain;\nexports.generateVariables = generateVariables;\nexports.setCookie = setCookie;\nexports.getCookie = getCookie;\nexports.checkCookie = checkCookie;\nexports.getAngle = getAngle;\nexports.evalWithContext = evalWithContext;\n\nvar _ChemFunctions = __webpack_require__(/*! ./ChemFunctions.js */ \"./src/ChemFunctions.js\");\n\nvar ChemFunction = _interopRequireWildcard(_ChemFunctions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar VAR = \"@\";\nvar SPVAR = \"~\";\nvar IDLENGTH = 16;\nvar GRABRADIUS = 10;\n\n/**\r\n    Calculates the straight-line distance between two 2D points\r\n    @param {Point} pt1\r\n    @param {Point} pt2\r\n    @param {string} [mode] \"cal\" or \"raw\"\r\n    @return {float} The distance between the points\r\n*/\nfunction getDist(pt1, pt2) {\n    var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cal\";\n\n    if (mode === \"cal\") {\n        return Math.pow(Math.pow(pt1.x - pt2.x, 2) + Math.pow(pt1.y - pt2.y, 2), 0.5);\n    } else if (mode === \"raw\") {\n        return Math.pow(Math.pow(pt1.rawx - pt2.rawx, 2) + Math.pow(pt1.rawy - pt2.rawy, 2), 0.5);\n    }\n}\n\n/**\r\n    Gets a random float between two values\r\n    @param {float} low Lowest value\r\n    @param {float} high Highest value\r\n    @return {float} A float between high and low\r\n*/\nfunction getRandom(low, high) {\n    return Math.random() * (high - low) + low;\n}\n\n/**\r\n    Rounds a float to a given number of decimal places\r\n    @param {float} num Number to round\r\n    @param {int} digits Number of digits to round to\r\n    @return {float} Rounded number\r\n*/\nfunction roundTo(num, digits) {\n    var mul = Math.pow(10, digits);\n    return Math.round(num * mul) / mul;\n}\n\n/**\r\n    Returns one of two results based on a condition\r\n    @param {string} condition Condition to be tested\r\n    @param {} iftrue Value to return if condition is true\r\n    @param {} iffalse Value to return if condition is false\r\n    @return {boolean} True or false\r\n*/\nfunction ifTF(condition, iftrue, iffalse) {\n    if (condition) {\n        return iftrue;\n    } else {\n        return iffalse;\n    }\n}\n\n/**\r\n * Numerically finds a root of an expression using Newton's method<br>\r\n * TODO: Generalize to multi-variable root finding using Jacobian\r\n * @param { string} args.expression  Equation that is set equal to 0\n * @param { string} args.variable    Variable name to replace in equation\n * @param { number} args.min     Minimum value to try\n * @param { number} args.max     Maximum value to try\n * @param { number} args.precision   Allowable error in the answer\n * @param { number} [args.initialguess]    Start guessing from here\n * @param { int} [args.maxloops=100] Maximum iterations to attempt\n * @return { number}     A root of the expression within the precision tolerance\r\n */\nfunction FindRoot(args) {\n    var re = new RegExp(args.variable, \"g\");\n    var loops = 0;\n    var guess = args.guess ? args.guess : (args.min + args.max) / 2;\n    var method = args.method ? args.method : \"newton\";\n    var maxloops = args.maxloops ? args.maxloops : 100;\n    var err = evalWithContext(args.expression.replace(re, guess));\n\n    switch (method) {\n        case \"newton\":\n            var step = (args.max - args.min) / 1000;\n            while (Math.abs(err) > args.precision) {\n                var ss = \"\";\n                for (var z = 0; z < loops; z++) {\n                    ss += \" \";\n                }\n                // Find local derivative at guess\n                var xp = guess + step;\n                var xm = guess - step;\n                var yp = evalWithContext(args.expression.replace(re, xp));\n                var ym = evalWithContext(args.expression.replace(re, xm));\n                var derivative = (yp - ym) / (2 * step);\n                // Find intersection of tangent line\n                if (derivative != 0) {\n                    guess -= err / derivative;\n                } else {\n                    console.log('FindRoot: local minimum found, try a different initial guess.', args);\n                    break;\n                }\n                // Check new guess\n                err = evalWithContext(args.expression.replace(re, guess));\n                // Escape if function does not converge in time\n                loops++;\n                if (loops > maxloops) {\n                    console.log(\"FindRoot exceeding max loops for arguments: \" + args);\n                    break;\n                }\n            }\n            break;\n        case \"bisect\":\n            var low = args.min;\n            var high = args.max;\n            while (Math.abs(err) > args.precision) {\n                var ylow = evalWithContext(args.expression.replace(re, low));\n                var yhigh = evalWithContext(args.expression.replace(re, high));\n                if (Math.abs(ylow) < Math.abs(yhigh)) {\n                    guess = low;\n                    err = ylow;\n                    high -= (low + high) / 2 - low;\n                } else {\n                    guess = high;\n                    err = yhigh;\n                    low += (low + high) / 2 - low;\n                }\n\n                loops++;\n                if (loops > maxloops) {\n                    console.log(\"FindRoot exceeding max loops for arguments: \" + args);\n                    break;\n                }\n            }\n            break;\n    }\n    return guess;\n}\n\n/**\r\n * TODO: use Jacobian to find optimal solution\r\n */\nfunction FindRootMulti(expressions, variables) {\n    var maxloops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = expressions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var expression = _step.value;\n\n            expression.err = expression.precision + 1; // Arbitrary number greater than 0 to initialize\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n        for (var _iterator2 = variables[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var variable = _step2.value;\n\n            variable.guess = variable.guess ? variable.guess : (variable.min + variable.max) / 2;\n            variable.step = Math.min(variable.max - variable.guess, variable.guess - variable.min);\n            variable.re = new RegExp(variable.symbol, \"g\");\n        }\n    } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n            }\n        } finally {\n            if (_didIteratorError2) {\n                throw _iteratorError2;\n            }\n        }\n    }\n\n    var loops = 0;\n\n    var systemvalid = false;\n    while (!systemvalid) {\n        loops++;\n        // Assume true\n        systemvalid = true;\n        // Check each equation\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n            for (var _iterator3 = expressions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var _expression = _step3.value;\n\n                var eqn = _expression.equation;\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n                var _iteratorError4 = undefined;\n\n                try {\n                    for (var _iterator4 = variables[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                        var _variable = _step4.value;\n\n                        eqn = eqn.replace(_variable.re, _variable.guess);\n                    }\n                    // Evaluate expression\n                } catch (err) {\n                    _didIteratorError4 = true;\n                    _iteratorError4 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                            _iterator4.return();\n                        }\n                    } finally {\n                        if (_didIteratorError4) {\n                            throw _iteratorError4;\n                        }\n                    }\n                }\n\n                _expression.err = Math.abs(evalWithContext(eqn)); // 0 err is perfect accuracy\n\n                _expression.valid = _expression.err <= _expression.precision;\n                systemvalid = systemvalid && _expression.valid;\n            }\n        } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                    _iterator3.return();\n                }\n            } finally {\n                if (_didIteratorError3) {\n                    throw _iteratorError3;\n                }\n            }\n        }\n\n        if (loops > maxloops) {\n            console.log(\"FindRootMulti exceeding max loops (\" + maxloops + \") for arguments: (\" + expressions + \", \" + variables + \")\");\n            break;\n        }\n    }\n\n    return variables;\n}\n\n/**\r\n    Generates a string of random digits\r\n    @param {int} digits Number of digits in ID\r\n    @return {string} A string of random digits\r\n*/\nfunction randomID() {\n    var digits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\n\n    var str = \"\";\n    // Math.random() generates a 17 digit number between 0 and 1\n    while (digits > 17) {\n        str += String(Math.random() * Math.pow(10, 17));\n        digits -= 17;\n    }\n    str += String(Math.round(Math.random() * Math.pow(10, digits)));\n    while (str.length < digits) {\n        str = \"0\" + str;\n    }\n    return str;\n}\n\n/**\r\n    Determines whether or not an object is iterable\r\n    @param {object} Object to test for iterability\r\n    @return {boolean} True or False\r\n*/\nfunction isIterable(obj) {\n    if (obj == null) {\n        return false;\n    }\n    return typeof obj[Symbol.iterator] === 'export function';\n}\n\n/**\r\n    Performs a replacement on all strings contained in an object\r\n    @param {object} obj Object to replace in\r\n    @param {string} pattern String to find\r\n    @param {string} replacement String to insert\r\n    @return {object} Post-replacement object\r\n*/\nfunction recursiveReplace(obj, pattern, replacement) {\n    if (typeof obj === \"string\") {\n        while (obj.indexOf(pattern) != -1) {\n            obj = obj.replace(pattern, replacement);\n        }\n    } else if ((typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\") {\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n            for (var _iterator5 = Object.keys(obj)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var child = _step5.value;\n\n                obj[child] = recursiveReplace(obj[child], pattern, replacement);\n            }\n        } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                    _iterator5.return();\n                }\n            } finally {\n                if (_didIteratorError5) {\n                    throw _iteratorError5;\n                }\n            }\n        }\n    }\n    return obj;\n}\n\n/**\r\n    Recursively converts all number-like strings in an object into numbers\r\n    @param {object} obj Object to numberfy\r\n    @return {object} Post-conversion object\r\n*/\nfunction recursiveNumberfy(obj) {\n    if (typeof obj === \"string\" && !isNaN(obj)) {\n        obj = parseFloat(obj);\n    } else if ((typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\") {\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n            for (var _iterator6 = Object.keys(obj)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var child = _step6.value;\n\n                obj[child] = recursiveNumberfy(obj[child]);\n            }\n        } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                }\n            } finally {\n                if (_didIteratorError6) {\n                    throw _iteratorError6;\n                }\n            }\n        }\n    }\n    return obj;\n}\n\n/**\r\n    Tests if a pattern exists on any string contained in an object\r\n    @param {object} obj Object to replace in\r\n    @param {string} pattern String to find\r\n    @return {boolean} True or false\r\n*/\nfunction recursiveExists(obj, pattern) {\n\n    if (typeof obj === \"string\") {\n        while (obj.indexOf(pattern) != -1) {\n            return true;\n        }\n    } else if ((typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\") {\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n            for (var _iterator7 = Object.keys(obj)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                var child = _step7.value;\n\n                if (recursiveExists(obj[child], pattern)) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                    _iterator7.return();\n                }\n            } finally {\n                if (_didIteratorError7) {\n                    throw _iteratorError7;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\r\n    Attempts to find a pattern in any string contained in an object\r\n    @param {object} obj Object to replace in\r\n    @param {string} pattern String to find\r\n    @return {list} List of strings containing specified string inside object somewhere\r\n*/\nfunction recursiveFind(obj, pattern) {\n    var findlist = [];\n    if (typeof obj === \"string\") {\n        while (obj.indexOf(pattern) != -1) {\n            return obj;\n        }\n    } else if ((typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\") {\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n            for (var _iterator8 = Object.keys(obj)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                var child = _step8.value;\n\n                var f = recursiveFind(obj[child], pattern);\n                if (f) {\n                    if (Array.isArray(f)) {\n                        var _iteratorNormalCompletion9 = true;\n                        var _didIteratorError9 = false;\n                        var _iteratorError9 = undefined;\n\n                        try {\n                            for (var _iterator9 = f[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                                var i = _step9.value;\n\n                                findlist.push(i);\n                            }\n                        } catch (err) {\n                            _didIteratorError9 = true;\n                            _iteratorError9 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                                    _iterator9.return();\n                                }\n                            } finally {\n                                if (_didIteratorError9) {\n                                    throw _iteratorError9;\n                                }\n                            }\n                        }\n                    } else {\n                        findlist.push(f);\n                    }\n                }\n            }\n        } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                    _iterator8.return();\n                }\n            } finally {\n                if (_didIteratorError8) {\n                    throw _iteratorError8;\n                }\n            }\n        }\n    }\n    return findlist;\n}\n\n/**\r\n    Generate hash from string <br>\r\n    Bad, need to redo\r\n*/\nString.prototype.hashCode = function () {\n    var hash = 0;\n    if (this.length > 0) {\n        for (var i = 0; i < this.length; i++) {\n            var char = this.charCodeAt(i);\n            hash = (hash << 5) - hash + char;\n            hash = hash & hash; // Convert to 32bit integer\n        }\n    }\n    return hash;\n};\n\n/**\r\n    Returns true if x is between a and b\r\n    @param {num} x Test number\r\n    @param {num} a First boundary\r\n    @param {num} b Second boundary\r\n    @param {boolean} [inclusive=true] Include boundaries\r\n    @return {boolean} True or false\r\n*/\nfunction isBetween(x, a, b) {\n    var inclusive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (inclusive) {\n        return a <= x && x <= b || a >= x && x >= b;\n    } else {\n        return a < x && x < b || a > x && x > b;\n    }\n}\n\n/**\r\n    Returns x if between a and b, otherwise whichever boundary is closer\r\n    @param {float} x Test number\r\n    @param {float} a First boundary\r\n    @param {float} b Second boundary\r\n    @return {float} A number between a and b\r\n*/\nfunction constrain(x, a, b) {\n    var min = Math.min(a, b);\n    var max = Math.max(a, b);\n    return Math.max(Math.min(x, max), min);\n}\n\n/**\r\n    Generates a object of variable values from a object of parameters. Example:<br>\r\n    {\"constants\": {\"x\": 1, \"y\": 2},<br>\r\n    \"random\": {\"z\": {\"min\": -3, \"max\": 3, \"digits\": 1}},<br>\r\n    \"calculated\": {\"sum\": \"@x@+@y@\", \"f\": \"myexport function(@z@)\"}}<br>\r\n    @param {object} variables\r\n    @param {object} variables.constants Constant values\r\n    @param {object} variables.random Linear random variables\r\n    @param {num} variables.random.min Minimum value\r\n    @param {num} variables.random.max Maximum value\r\n    @param {num} variables.random.digits Digits of precision\r\n    @param {object} variables.calculated Variables calculated from other variables, referenced by surrounding in @ symbols\r\n    @return {object} Objectionary of variable names and values\r\n*/\nfunction generateVariables(variables) {\n    var variablevalues = {};\n    // Assign constants\n    var _iteratorNormalCompletion10 = true;\n    var _didIteratorError10 = false;\n    var _iteratorError10 = undefined;\n\n    try {\n        for (var _iterator10 = Object.keys(variables.constants)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n            var name = _step10.value;\n\n            variablevalues[name] = variables.constants[name];\n        }\n        // Generate and assign random variables\n    } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                _iterator10.return();\n            }\n        } finally {\n            if (_didIteratorError10) {\n                throw _iteratorError10;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion11 = true;\n    var _didIteratorError11 = false;\n    var _iteratorError11 = undefined;\n\n    try {\n        for (var _iterator11 = Object.keys(variables.random)[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n            var _name = _step11.value;\n\n            var low = variables.random[_name].min;\n            var high = variables.random[_name].max;\n            var digits = variables.random[_name].digits;\n            var r = getRandom(low, high);\n            variablevalues[_name] = roundTo(r, digits);\n        }\n        // Assign calculated variables\n    } catch (err) {\n        _didIteratorError11 = true;\n        _iteratorError11 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                _iterator11.return();\n            }\n        } finally {\n            if (_didIteratorError11) {\n                throw _iteratorError11;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion12 = true;\n    var _didIteratorError12 = false;\n    var _iteratorError12 = undefined;\n\n    try {\n        for (var _iterator12 = Object.keys(variables.calculated)[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n            var _name2 = _step12.value;\n\n            // Construct expression, fill in variable values\n            var exp = variables.calculated[_name2];\n            // Keep replacing until no variables remain\n            var maxloops = 10;\n            var loops = 0;\n            while (exp.indexOf(\"\" + VAR) != -1 && loops < maxloops) {\n                var _iteratorNormalCompletion14 = true;\n                var _didIteratorError14 = false;\n                var _iteratorError14 = undefined;\n\n                try {\n                    for (var _iterator14 = Object.keys(variablevalues)[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                        var variable = _step14.value;\n\n                        exp = exp.replace(\"\" + VAR + variable + VAR, variablevalues[variable]);\n                    }\n                } catch (err) {\n                    _didIteratorError14 = true;\n                    _iteratorError14 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                            _iterator14.return();\n                        }\n                    } finally {\n                        if (_didIteratorError14) {\n                            throw _iteratorError14;\n                        }\n                    }\n                }\n\n                loops++;\n            }\n            if (loops >= maxloops) {\n                console.log(\"Error, maximum loops exceeded, cannot resolve\", _name2, \"=\", exp);\n            }\n            // Evaluate expression (trusted code provided by the question-creator)\n            //console.log(\"Evaluating\",exp);\n            variablevalues[_name2] = evalWithContext(exp);\n        }\n        // Numberfy strings\n    } catch (err) {\n        _didIteratorError12 = true;\n        _iteratorError12 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                _iterator12.return();\n            }\n        } finally {\n            if (_didIteratorError12) {\n                throw _iteratorError12;\n            }\n        }\n    }\n\n    var _iteratorNormalCompletion13 = true;\n    var _didIteratorError13 = false;\n    var _iteratorError13 = undefined;\n\n    try {\n        for (var _iterator13 = Object.keys(variables.calculated)[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n            var _name3 = _step13.value;\n\n            if (typeof variablevalues[_name3] === \"string\" && !isNaN(variablevalues[_name3])) {\n                variablevalues[_name3] = parseFloat(variablevalues[_name3]);\n            }\n        }\n    } catch (err) {\n        _didIteratorError13 = true;\n        _iteratorError13 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                _iterator13.return();\n            }\n        } finally {\n            if (_didIteratorError13) {\n                throw _iteratorError13;\n            }\n        }\n    }\n\n    return variablevalues;\n}\n\n/**\r\n    Creates a new cookie for this page\r\n    @param {string} cname Name of the cookie\r\n    @param {string} cvalue Value of the cookie\r\n    @param {int} milliseconds Lifespan of cookie in ms\r\n*/\nfunction setCookie(cname, cvalue, milliseconds) {\n    var d = new Date();\n    d.setTime(d.getTime() + milliseconds);\n    var expires = \"expires=\" + d.toGMTString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\n/**\r\n    Retrieves a cookie for this page\r\n    @param {string} cname Name of the cookie\r\n*/\nfunction getCookie(cname) {\n    var name = cname + \"=\";\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var ca = decodedCookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) == 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return undefined;\n}\n\n/**\r\n    Example export function for creating/checking a cookie\r\n*/\nfunction checkCookie() {\n    var user = getCookie(\"username\");\n    if (user != \"\") {\n        alert(\"Welcome again \" + user);\n    } else {\n        user = prompt(\"Please enter your name:\", \"\");\n        if (user != \"\" && user != null) {\n            setCookie(\"username\", user, 5 * 1000);\n        }\n    }\n}\n\n/**\r\n * Calculates theta\r\n * @param {number} x1  Base point\r\n * @param {number} y1  Base point\r\n * @param {number} x2  Target point\r\n * @param {number} y2  Target point\r\n * @return {float}  Angle between base and target point\r\n */\nfunction getAngle(x1, y1, x2, y2) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    var theta = Math.atan(dy / dx);\n    if (dx < 0) {\n        theta += Math.PI;\n    }\n    if (theta < 0) {\n        theta += 2 * Math.PI;\n    } else if (theta > 2 * Math.PI) {\n        theta -= 2 * Math.PI;\n    }\n    return theta;\n}\n\nfunction evalWithContext(code) {\n    var Antoine = ChemFunction.Antoine;\n    var InvAntoine = ChemFunction.InvAntoine;\n    var BubblePoint = ChemFunction.BubblePoint;\n    var DewPoint = ChemFunction.DewPoint;\n    return eval(code);\n}\n\n//# sourceURL=webpack:///./src/sky-helpers.js?");

/***/ })

/******/ });